/* Generated by Cython 0.25.1 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_1"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && METH_FASTCALL == PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; };
    template<typename U> bool operator !=(U other) { return *ptr != other; };
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__khmer___oxli__streaming
#define __PYX_HAVE_API__khmer___oxli__streaming
#include <memory>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string.h>
#include <string>
#include <vector>
#include <utility>
#include <map>
#include <set>
#include <queue>
#include <stdint.h>
#include "khmer.hh"
#include "kmer_hash.hh"
#include "read_parsers.hh"
#include "_khmer.hh"
#include "hashtable.hh"
#include "_cpy_counttable.hh"
#include "_cpy_nodetable.hh"
#include "hashgraph.hh"
#include "labelhash.hh"
#include "traversal.hh"
#include "assembler.hh"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "utf8"
#define __Pyx_PyObject_FromString __Pyx_PyUnicode_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "khmer/_oxli/streaming.pyx",
  "khmer/_oxli/streaming.pxd",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence;
struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle;
struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser;
struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader;
struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader;
struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__;
struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__;
struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__;
struct __pyx_opt_args_5khmer_5_oxli_9streaming_8Sequence__new;

/* "khmer/_oxli/streaming.pxd":12
 * 
 *     @staticmethod
 *     cdef Sequence _new(str name, str sequence,             # <<<<<<<<<<<<<<
 *                        str annotations=*, str quality=*)
 * 
 */
struct __pyx_opt_args_5khmer_5_oxli_9streaming_8Sequence__new {
  int __pyx_n;
  PyObject *annotations;
  PyObject *quality;
};

/* "khmer/_oxli/streaming.pxd":8
 * 
 * 
 * cdef class Sequence:             # <<<<<<<<<<<<<<
 *     cdef CpSequence _obj
 * 
 */
struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_Sequence *__pyx_vtab;
  khmer::read_parsers::Read _obj;
};


/* "khmer/_oxli/streaming.pxd":19
 * 
 * 
 * cdef class ReadBundle:             # <<<<<<<<<<<<<<
 *     cdef list reads
 * 
 */
struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle {
  PyObject_HEAD
  PyObject *reads;
};


/* "khmer/_oxli/streaming.pxd":23
 * 
 * 
 * cdef class FastxParser:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[CpFastxParser] _this
 * 
 */
struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_FastxParser *__pyx_vtab;
  std::unique_ptr<khmer::read_parsers::FastxParser>  _this;
};


/* "khmer/_oxli/streaming.pxd":29
 * 
 * 
 * cdef class SplitPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     cdef FastxParser left_parser
 */
struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_vtab;
  struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *left_parser;
  struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *right_parser;
  int min_length;
  bool force_name_match;
};


/* "khmer/_oxli/streaming.pxd":39
 * 
 * 
 * cdef class BrokenPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     cdef FastxParser parser
 */
struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_vtab;
  struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *parser;
  int min_length;
  bool force_single;
  bool require_paired;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *record;
};


/* "khmer/_oxli/streaming.pyx":135
 *             return None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = self._next()
 *         while seq is not None:
 */
struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ {
  PyObject_HEAD
  struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_self;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_seq;
};


/* "khmer/_oxli/streaming.pyx":154
 *         self.force_name_match = force_name_match
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first, second
 *         cdef object err
 */
struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ {
  PyObject_HEAD
  PyObject *__pyx_v_err;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_first;
  int __pyx_v_found;
  PyObject *__pyx_v_read_num;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_second;
  struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_v_self;
};


/* "khmer/_oxli/streaming.pyx":216
 *         self.record = None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first
 *         cdef Sequence second
 */
struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ {
  PyObject_HEAD
  PyObject *__pyx_v_err;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_first;
  int __pyx_v_found;
  bool __pyx_v_passed_length;
  int __pyx_v_read_num;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_second;
  struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self;
};



/* "khmer/_oxli/streaming.pyx":10
 * 
 * 
 * cdef class Sequence:             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_Sequence {
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *(*_new)(PyObject *, PyObject *, struct __pyx_opt_args_5khmer_5_oxli_9streaming_8Sequence__new *__pyx_optional_args);
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *(*_wrap)(khmer::read_parsers::Read);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_Sequence *__pyx_vtabptr_5khmer_5_oxli_9streaming_Sequence;


/* "khmer/_oxli/streaming.pyx":124
 * 
 * 
 * cdef class FastxParser:             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, str filename):
 */

struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_FastxParser {
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *(*_next)(struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_FastxParser *__pyx_vtabptr_5khmer_5_oxli_9streaming_FastxParser;


/* "khmer/_oxli/streaming.pyx":142
 * 
 * 
 * cdef class SplitPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, FastxParser left_parser,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_SplitPairedReader {
  PyObject *(*_next)(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_vtabptr_5khmer_5_oxli_9streaming_SplitPairedReader;


/* "khmer/_oxli/streaming.pyx":199
 * 
 * 
 * cdef class BrokenPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, FastxParser parser,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_BrokenPairedReader {
  PyObject *(*_next)(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_vtabptr_5khmer_5_oxli_9streaming_BrokenPairedReader;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* bytes_tailmatch.proto */
static int __Pyx_PyBytes_SingleTailmatch(PyObject* self, PyObject* arg,
                                         Py_ssize_t start, Py_ssize_t end, int direction);
static int __Pyx_PyBytes_Tailmatch(PyObject* self, PyObject* substr,
                                   Py_ssize_t start, Py_ssize_t end, int direction);

/* unicode_tailmatch.proto */
static int __Pyx_PyUnicode_Tailmatch(PyObject* s, PyObject* substr,
                                     Py_ssize_t start, Py_ssize_t end, int direction);

/* str_tailmatch.proto */
static CYTHON_INLINE int __Pyx_PyStr_Tailmatch(PyObject* self, PyObject* arg, Py_ssize_t start,
                                               Py_ssize_t end, int direction);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_f_5khmer_5_oxli_9streaming_8Sequence__new(PyObject *__pyx_v_name, PyObject *__pyx_v_sequence, struct __pyx_opt_args_5khmer_5_oxli_9streaming_8Sequence__new *__pyx_optional_args); /* proto*/
static struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_f_5khmer_5_oxli_9streaming_8Sequence__wrap(khmer::read_parsers::Read __pyx_v_cseq); /* proto*/
static struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_f_5khmer_5_oxli_9streaming_11FastxParser__next(struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_5khmer_5_oxli_9streaming_17SplitPairedReader__next(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_5khmer_5_oxli_9streaming_18BrokenPairedReader__next(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self); /* proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.queue' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'khmer._oxli._oxli' */

/* Module declarations from 'khmer._oxli.streaming' */
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_9streaming_Sequence = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_9streaming_ReadBundle = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_9streaming_FastxParser = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_9streaming_SplitPairedReader = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_9streaming_BrokenPairedReader = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ = 0;
static PyObject *__pyx_f_5khmer_5_oxli_9streaming__split_left_right(PyObject *); /*proto*/
static bool __pyx_f_5khmer_5_oxli_9streaming__check_is_pair(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *, struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *); /*proto*/
static CYTHON_INLINE bool __pyx_f_5khmer_5_oxli_9streaming_is_valid_dna(char const ); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "khmer._oxli.streaming"
int __pyx_module_is_main_khmer___oxli__streaming = 0;

/* Implementation of 'khmer._oxli.streaming' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_1[] = "/1";
static const char __pyx_k_2[] = "/2";
static const char __pyx_k_r1[] = "r1";
static const char __pyx_k_r2[] = "r2";
static const char __pyx_k_0_1[] = "\n\"{0}\"\n\"{1}\"";
static const char __pyx_k_1_2[] = "1:";
static const char __pyx_k_2_2[] = "2:";
static const char __pyx_k__11[] = "";
static const char __pyx_k__15[] = "/";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_msg[] = "msg";
static const char __pyx_k_new[] = "new";
static const char __pyx_k_seq[] = "seq";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_this[] = "_this";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_first[] = "first";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_read1[] = "read1";
static const char __pyx_k_read2[] = "read2";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_parser[] = "parser";
static const char __pyx_k_second[] = "second";
static const char __pyx_k_stderr[] = "stderr";
static const char __pyx_k_no_read[] = "<no read>";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_quality[] = "quality";
static const char __pyx_k_r1_name[] = "r1_name";
static const char __pyx_k_r2_name[] = "r2_name";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_sequence[] = "sequence";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_min_length[] = "min_length";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_annotations[] = "annotations";
static const char __pyx_k_left_parser[] = "left_parser";
static const char __pyx_k_parser_next[] = "parser_next";
static const char __pyx_k_print_error[] = "print_error";
static const char __pyx_k_force_single[] = "force_single";
static const char __pyx_k_right_parser[] = "right_parser";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_check_is_pair[] = "check_is_pair";
static const char __pyx_k_require_paired[] = "require_paired";
static const char __pyx_k_force_name_match[] = "force_name_match";
static const char __pyx_k_FastxParser___iter[] = "FastxParser.__iter__";
static const char __pyx_k_UnpairedReadsError[] = "UnpairedReadsError";
static const char __pyx_k_khmer__oxli_streaming[] = "khmer._oxli.streaming";
static const char __pyx_k_SplitPairedReader___iter[] = "SplitPairedReader.__iter__";
static const char __pyx_k_BrokenPairedReader___iter[] = "BrokenPairedReader.__iter__";
static const char __pyx_k_UnpairedReadsError___init[] = "UnpairedReadsError.__init__";
static const char __pyx_k_force_single_and_require_paired[] = "force_single and require_paired cannot both be set!";
static const char __pyx_k_work_khmer_khmer__oxli_streamin[] = "/work/khmer/khmer/_oxli/streaming.pyx";
static const char __pyx_k_Differing_lengths_of_left_and_ri[] = "Differing lengths of left and right files!";
static const char __pyx_k_Unpaired_reads_when_require_pair[] = "Unpaired reads when require_paired is set!";
static const char __pyx_k_ValueError_with_refs_to_the_read[] = "ValueError with refs to the read pair in question.";
static PyObject *__pyx_kp_s_0_1;
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_1_2;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_2_2;
static PyObject *__pyx_n_s_BrokenPairedReader___iter;
static PyObject *__pyx_kp_s_Differing_lengths_of_left_and_ri;
static PyObject *__pyx_n_s_FastxParser___iter;
static PyObject *__pyx_n_s_SplitPairedReader___iter;
static PyObject *__pyx_kp_s_UTF_8;
static PyObject *__pyx_n_s_UnpairedReadsError;
static PyObject *__pyx_n_s_UnpairedReadsError___init;
static PyObject *__pyx_kp_s_Unpaired_reads_when_require_pair;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s_ValueError_with_refs_to_the_read;
static PyObject *__pyx_kp_s__11;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_n_s_annotations;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_check_is_pair;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_first;
static PyObject *__pyx_n_s_force_name_match;
static PyObject *__pyx_n_s_force_single;
static PyObject *__pyx_kp_s_force_single_and_require_paired;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_khmer__oxli_streaming;
static PyObject *__pyx_n_s_left_parser;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_min_length;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_msg;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_read;
static PyObject *__pyx_n_s_parser;
static PyObject *__pyx_n_s_parser_next;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_print_error;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_quality;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_r1;
static PyObject *__pyx_n_s_r1_name;
static PyObject *__pyx_n_s_r2;
static PyObject *__pyx_n_s_r2_name;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read1;
static PyObject *__pyx_n_s_read2;
static PyObject *__pyx_n_s_require_paired;
static PyObject *__pyx_n_s_right_parser;
static PyObject *__pyx_n_s_second;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_seq;
static PyObject *__pyx_n_s_sequence;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_stderr;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_this;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_kp_s_work_khmer_khmer__oxli_streamin;
static int __pyx_pf_5khmer_5_oxli_9streaming_8Sequence___cinit__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_2__str__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_5khmer_5_oxli_9streaming_8Sequence_4__len__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_4name___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_8sequence___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_11annotations___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_7quality___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_6new(PyObject *__pyx_v_name, PyObject *__pyx_v_sequence, PyObject *__pyx_v_annotations, PyObject *__pyx_v_quality); /* proto */
static int __pyx_pf_5khmer_5_oxli_9streaming_10ReadBundle___cinit__(struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *__pyx_v_self, PyObject *__pyx_v_raw_records); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_10ReadBundle_9num_reads___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_10ReadBundle_12total_length___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_print_error(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_msg); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18UnpairedReadsError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_msg, PyObject *__pyx_v_r1, PyObject *__pyx_v_r2); /* proto */
static int __pyx_pf_5khmer_5_oxli_9streaming_11FastxParser___cinit__(struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_11FastxParser_2__iter__(struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_self); /* proto */
static int __pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader___cinit__(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_left_parser, struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_right_parser, int __pyx_v_min_length, bool __pyx_v_force_name_match); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader_2__iter__(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader_10min_length___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader_16force_name_match___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_v_self); /* proto */
static int __pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader___cinit__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_parser, int __pyx_v_min_length, bool __pyx_v_force_single, bool __pyx_v_require_paired); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_2__iter__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_10min_length___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_12force_single___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_14require_paired___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_6record___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_2check_is_pair(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_first, struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_second); /* proto */
static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming_Sequence(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming_ReadBundle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming_FastxParser(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming_SplitPairedReader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming_BrokenPairedReader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;

/* "khmer/_oxli/streaming.pyx":12
 * cdef class Sequence:
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_9streaming_8Sequence_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_9streaming_8Sequence_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_8Sequence___cinit__(((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_9streaming_8Sequence___cinit__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":15
 *         pass
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.sequence
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_8Sequence_2__str__(((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_2__str__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "khmer/_oxli/streaming.pyx":16
 * 
 *     def __str__(self):
 *         return self.sequence             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":15
 *         pass
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.sequence
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.streaming.Sequence.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":18
 *         return self.sequence
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._obj.sequence.length()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_5khmer_5_oxli_9streaming_8Sequence_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5khmer_5_oxli_9streaming_8Sequence_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_8Sequence_4__len__(((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5khmer_5_oxli_9streaming_8Sequence_4__len__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "khmer/_oxli/streaming.pyx":19
 * 
 *     def __len__(self):
 *         return self._obj.sequence.length()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_r = __pyx_v_self->_obj.sequence.length();
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":18
 *         return self.sequence
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._obj.sequence.length()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":22
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self._obj.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_8Sequence_4name___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_4name___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/streaming.pyx":23
 *     @property
 *     def name(self):
 *         return self._obj.name             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_obj.name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":22
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self._obj.name
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.streaming.Sequence.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":26
 * 
 *     @property
 *     def sequence(self):             # <<<<<<<<<<<<<<
 *         return self._obj.sequence
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_8sequence_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_8sequence_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_8Sequence_8sequence___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_8sequence___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/streaming.pyx":27
 *     @property
 *     def sequence(self):
 *         return self._obj.sequence             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_obj.sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":26
 * 
 *     @property
 *     def sequence(self):             # <<<<<<<<<<<<<<
 *         return self._obj.sequence
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.streaming.Sequence.sequence.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":30
 * 
 *     @property
 *     def annotations(self):             # <<<<<<<<<<<<<<
 *         cdef str annotations = self._this.annotations
 *         return annotations if annotations else None
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_11annotations_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_11annotations_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_8Sequence_11annotations___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_11annotations___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self) {
  PyObject *__pyx_v_annotations = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/streaming.pyx":31
 *     @property
 *     def annotations(self):
 *         cdef str annotations = self._this.annotations             # <<<<<<<<<<<<<<
 *         return annotations if annotations else None
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_this); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_annotations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 31, __pyx_L1_error)
  __pyx_v_annotations = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/streaming.pyx":32
 *     def annotations(self):
 *         cdef str annotations = self._this.annotations
 *         return annotations if annotations else None             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_annotations); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 32, __pyx_L1_error)
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_v_annotations);
    __pyx_t_2 = __pyx_v_annotations;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":30
 * 
 *     @property
 *     def annotations(self):             # <<<<<<<<<<<<<<
 *         cdef str annotations = self._this.annotations
 *         return annotations if annotations else None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.streaming.Sequence.annotations.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_annotations);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":35
 * 
 *     @property
 *     def quality(self):             # <<<<<<<<<<<<<<
 *         cdef str quality = self._this.quality
 *         return quality if quality else None
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_7quality_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_7quality_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_8Sequence_7quality___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_7quality___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_self) {
  PyObject *__pyx_v_quality = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/streaming.pyx":36
 *     @property
 *     def quality(self):
 *         cdef str quality = self._this.quality             # <<<<<<<<<<<<<<
 *         return quality if quality else None
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_this); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_quality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  __pyx_v_quality = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/streaming.pyx":37
 *     def quality(self):
 *         cdef str quality = self._this.quality
 *         return quality if quality else None             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_quality); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 37, __pyx_L1_error)
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_v_quality);
    __pyx_t_2 = __pyx_v_quality;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":35
 * 
 *     @property
 *     def quality(self):             # <<<<<<<<<<<<<<
 *         cdef str quality = self._this.quality
 *         return quality if quality else None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.streaming.Sequence.quality.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_quality);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":40
 * 
 *     @staticmethod
 *     def new(str name, str sequence, str annotations=None, str quality=None):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_7new(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5khmer_5_oxli_9streaming_8Sequence_7new = {"new", (PyCFunction)__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_7new, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_7new(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_sequence = 0;
  PyObject *__pyx_v_annotations = 0;
  PyObject *__pyx_v_quality = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_sequence,&__pyx_n_s_annotations,&__pyx_n_s_quality,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject*)Py_None);
    values[3] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sequence)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("new", 0, 2, 4, 1); __PYX_ERR(0, 40, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_annotations);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_quality);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "new") < 0)) __PYX_ERR(0, 40, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = ((PyObject*)values[0]);
    __pyx_v_sequence = ((PyObject*)values[1]);
    __pyx_v_annotations = ((PyObject*)values[2]);
    __pyx_v_quality = ((PyObject*)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("new", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 40, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.streaming.Sequence.new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 40, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(0, 40, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_annotations), (&PyString_Type), 1, "annotations", 1))) __PYX_ERR(0, 40, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quality), (&PyString_Type), 1, "quality", 1))) __PYX_ERR(0, 40, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_8Sequence_6new(__pyx_v_name, __pyx_v_sequence, __pyx_v_annotations, __pyx_v_quality);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_8Sequence_6new(PyObject *__pyx_v_name, PyObject *__pyx_v_sequence, PyObject *__pyx_v_annotations, PyObject *__pyx_v_quality) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_seq = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("new", 0);

  /* "khmer/_oxli/streaming.pyx":41
 *     @staticmethod
 *     def new(str name, str sequence, str annotations=None, str quality=None):
 *         cdef Sequence seq = Sequence()             # <<<<<<<<<<<<<<
 *         seq._obj.sequence = sequence.encode('UTF-8')
 *         seq._obj.name = name.encode('UTF-8')
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5khmer_5_oxli_9streaming_Sequence), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_seq = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":42
 *     def new(str name, str sequence, str annotations=None, str quality=None):
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sequence, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_seq->_obj.sequence = __pyx_t_3;

  /* "khmer/_oxli/streaming.pyx":43
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')
 *         seq._obj.name = name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_seq->_obj.name = __pyx_t_3;

  /* "khmer/_oxli/streaming.pyx":44
 *         seq._obj.sequence = sequence.encode('UTF-8')
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:             # <<<<<<<<<<<<<<
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:
 */
  __pyx_t_4 = (__pyx_v_annotations != ((PyObject*)Py_None));
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "khmer/_oxli/streaming.pyx":45
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if quality is not None:
 *             seq._obj.quality = quality.encode('UTF-8')
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_annotations, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_seq->_obj.annotations = __pyx_t_3;

    /* "khmer/_oxli/streaming.pyx":44
 *         seq._obj.sequence = sequence.encode('UTF-8')
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:             # <<<<<<<<<<<<<<
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:
 */
  }

  /* "khmer/_oxli/streaming.pyx":46
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:             # <<<<<<<<<<<<<<
 *             seq._obj.quality = quality.encode('UTF-8')
 * 
 */
  __pyx_t_5 = (__pyx_v_quality != ((PyObject*)Py_None));
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "khmer/_oxli/streaming.pyx":47
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:
 *             seq._obj.quality = quality.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         return seq
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_quality, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_seq->_obj.quality = __pyx_t_3;

    /* "khmer/_oxli/streaming.pyx":46
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:             # <<<<<<<<<<<<<<
 *             seq._obj.quality = quality.encode('UTF-8')
 * 
 */
  }

  /* "khmer/_oxli/streaming.pyx":49
 *             seq._obj.quality = quality.encode('UTF-8')
 * 
 *         return seq             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_seq));
  __pyx_r = ((PyObject *)__pyx_v_seq);
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":40
 * 
 *     @staticmethod
 *     def new(str name, str sequence, str annotations=None, str quality=None):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.streaming.Sequence.new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_seq);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":52
 * 
 *     @staticmethod
 *     cdef Sequence _new(str name, str sequence, str annotations=None, str quality=None):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')
 */

static struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_f_5khmer_5_oxli_9streaming_8Sequence__new(PyObject *__pyx_v_name, PyObject *__pyx_v_sequence, struct __pyx_opt_args_5khmer_5_oxli_9streaming_8Sequence__new *__pyx_optional_args) {
  PyObject *__pyx_v_annotations = ((PyObject*)Py_None);
  PyObject *__pyx_v_quality = ((PyObject*)Py_None);
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_seq = 0;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("_new", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_annotations = __pyx_optional_args->annotations;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_quality = __pyx_optional_args->quality;
      }
    }
  }

  /* "khmer/_oxli/streaming.pyx":53
 *     @staticmethod
 *     cdef Sequence _new(str name, str sequence, str annotations=None, str quality=None):
 *         cdef Sequence seq = Sequence()             # <<<<<<<<<<<<<<
 *         seq._obj.sequence = sequence.encode('UTF-8')
 *         seq._obj.name = name.encode('UTF-8')
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5khmer_5_oxli_9streaming_Sequence), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_seq = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":54
 *     cdef Sequence _new(str name, str sequence, str annotations=None, str quality=None):
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sequence, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_seq->_obj.sequence = __pyx_t_3;

  /* "khmer/_oxli/streaming.pyx":55
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')
 *         seq._obj.name = name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_seq->_obj.name = __pyx_t_3;

  /* "khmer/_oxli/streaming.pyx":56
 *         seq._obj.sequence = sequence.encode('UTF-8')
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:             # <<<<<<<<<<<<<<
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:
 */
  __pyx_t_4 = (__pyx_v_annotations != ((PyObject*)Py_None));
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "khmer/_oxli/streaming.pyx":57
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if quality is not None:
 *             seq._obj.quality = quality.encode('UTF-8')
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_annotations, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 57, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_seq->_obj.annotations = __pyx_t_3;

    /* "khmer/_oxli/streaming.pyx":56
 *         seq._obj.sequence = sequence.encode('UTF-8')
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:             # <<<<<<<<<<<<<<
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:
 */
  }

  /* "khmer/_oxli/streaming.pyx":58
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:             # <<<<<<<<<<<<<<
 *             seq._obj.quality = quality.encode('UTF-8')
 * 
 */
  __pyx_t_5 = (__pyx_v_quality != ((PyObject*)Py_None));
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "khmer/_oxli/streaming.pyx":59
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:
 *             seq._obj.quality = quality.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         return seq
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_quality, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_seq->_obj.quality = __pyx_t_3;

    /* "khmer/_oxli/streaming.pyx":58
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:             # <<<<<<<<<<<<<<
 *             seq._obj.quality = quality.encode('UTF-8')
 * 
 */
  }

  /* "khmer/_oxli/streaming.pyx":61
 *             seq._obj.quality = quality.encode('UTF-8')
 * 
 *         return seq             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_seq));
  __pyx_r = __pyx_v_seq;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":52
 * 
 *     @staticmethod
 *     cdef Sequence _new(str name, str sequence, str annotations=None, str quality=None):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.streaming.Sequence._new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_seq);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":64
 * 
 *     @staticmethod
 *     cdef Sequence _wrap(CpSequence cseq):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence()
 *         seq._obj = cseq
 */

static struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_f_5khmer_5_oxli_9streaming_8Sequence__wrap(khmer::read_parsers::Read __pyx_v_cseq) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_seq = 0;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_wrap", 0);

  /* "khmer/_oxli/streaming.pyx":65
 *     @staticmethod
 *     cdef Sequence _wrap(CpSequence cseq):
 *         cdef Sequence seq = Sequence()             # <<<<<<<<<<<<<<
 *         seq._obj = cseq
 *         return seq
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5khmer_5_oxli_9streaming_Sequence), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_seq = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":66
 *     cdef Sequence _wrap(CpSequence cseq):
 *         cdef Sequence seq = Sequence()
 *         seq._obj = cseq             # <<<<<<<<<<<<<<
 *         return seq
 * 
 */
  __pyx_v_seq->_obj = __pyx_v_cseq;

  /* "khmer/_oxli/streaming.pyx":67
 *         cdef Sequence seq = Sequence()
 *         seq._obj = cseq
 *         return seq             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_seq));
  __pyx_r = __pyx_v_seq;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":64
 * 
 *     @staticmethod
 *     cdef Sequence _wrap(CpSequence cseq):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence()
 *         seq._obj = cseq
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.streaming.Sequence._wrap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_seq);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":73
 * cdef class ReadBundle:
 * 
 *     def __cinit__(self, *raw_records):             # <<<<<<<<<<<<<<
 *         self.reads = [r for r in raw_records if r]
 * 
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_9streaming_10ReadBundle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_9streaming_10ReadBundle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_raw_records = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_raw_records = __pyx_args;
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_10ReadBundle___cinit__(((struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *)__pyx_v_self), __pyx_v_raw_records);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_raw_records);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_9streaming_10ReadBundle___cinit__(struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *__pyx_v_self, PyObject *__pyx_v_raw_records) {
  PyObject *__pyx_v_r = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/streaming.pyx":74
 * 
 *     def __cinit__(self, *raw_records):
 *         self.reads = [r for r in raw_records if r]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_raw_records; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 74, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_r); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 74, __pyx_L1_error)
    if (__pyx_t_5) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_r))) __PYX_ERR(0, 74, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->reads);
  __Pyx_DECREF(__pyx_v_self->reads);
  __pyx_v_self->reads = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":73
 * cdef class ReadBundle:
 * 
 *     def __cinit__(self, *raw_records):             # <<<<<<<<<<<<<<
 *         self.reads = [r for r in raw_records if r]
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.streaming.ReadBundle.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":77
 * 
 *     @property
 *     def num_reads(self):             # <<<<<<<<<<<<<<
 *         return len(self.reads)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_10ReadBundle_9num_reads_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_10ReadBundle_9num_reads_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_10ReadBundle_9num_reads___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_10ReadBundle_9num_reads___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/streaming.pyx":78
 *     @property
 *     def num_reads(self):
 *         return len(self.reads)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->reads;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 78, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":77
 * 
 *     @property
 *     def num_reads(self):             # <<<<<<<<<<<<<<
 *         return len(self.reads)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.streaming.ReadBundle.num_reads.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":81
 * 
 *     @property
 *     def total_length(self):             # <<<<<<<<<<<<<<
 *         return sum([len(r.sequence) for r in self.reads])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_10ReadBundle_12total_length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_10ReadBundle_12total_length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_10ReadBundle_12total_length___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_10ReadBundle_12total_length___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *__pyx_v_self) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/streaming.pyx":82
 *     @property
 *     def total_length(self):
 *         return sum([len(r.sequence) for r in self.reads])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->reads == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 82, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->reads; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 82, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_r, __pyx_n_s_sequence); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":81
 * 
 *     @property
 *     def total_length(self):             # <<<<<<<<<<<<<<
 *         return sum([len(r.sequence) for r in self.reads])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.streaming.ReadBundle.total_length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":85
 * 
 * 
 * def print_error(msg):             # <<<<<<<<<<<<<<
 *     """Print the given message to 'stderr'."""
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_1print_error(PyObject *__pyx_self, PyObject *__pyx_v_msg); /*proto*/
static char __pyx_doc_5khmer_5_oxli_9streaming_print_error[] = "Print the given message to 'stderr'.";
static PyMethodDef __pyx_mdef_5khmer_5_oxli_9streaming_1print_error = {"print_error", (PyCFunction)__pyx_pw_5khmer_5_oxli_9streaming_1print_error, METH_O, __pyx_doc_5khmer_5_oxli_9streaming_print_error};
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_1print_error(PyObject *__pyx_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_error (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_print_error(__pyx_self, ((PyObject *)__pyx_v_msg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_print_error(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("print_error", 0);

  /* "khmer/_oxli/streaming.pyx":88
 *     """Print the given message to 'stderr'."""
 * 
 *     print(msg, file=sys.stderr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_msg);
  __Pyx_GIVEREF(__pyx_v_msg);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_msg);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stderr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_file, __pyx_t_4) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "khmer/_oxli/streaming.pyx":85
 * 
 * 
 * def print_error(msg):             # <<<<<<<<<<<<<<
 *     """Print the given message to 'stderr'."""
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.streaming.print_error", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":94
 *     """ValueError with refs to the read pair in question."""
 * 
 *     def __init__(self, msg, r1, r2):             # <<<<<<<<<<<<<<
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18UnpairedReadsError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5khmer_5_oxli_9streaming_18UnpairedReadsError_1__init__ = {"__init__", (PyCFunction)__pyx_pw_5khmer_5_oxli_9streaming_18UnpairedReadsError_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18UnpairedReadsError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_msg = 0;
  PyObject *__pyx_v_r1 = 0;
  PyObject *__pyx_v_r2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_msg,&__pyx_n_s_r1,&__pyx_n_s_r2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_msg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 1); __PYX_ERR(0, 94, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 2); __PYX_ERR(0, 94, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 3); __PYX_ERR(0, 94, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 94, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_msg = values[1];
    __pyx_v_r1 = values[2];
    __pyx_v_r2 = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 94, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.streaming.UnpairedReadsError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_18UnpairedReadsError___init__(__pyx_self, __pyx_v_self, __pyx_v_msg, __pyx_v_r1, __pyx_v_r2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18UnpairedReadsError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_msg, PyObject *__pyx_v_r1, PyObject *__pyx_v_r2) {
  PyObject *__pyx_v_r1_name = NULL;
  PyObject *__pyx_v_r2_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_msg);

  /* "khmer/_oxli/streaming.pyx":95
 * 
 *     def __init__(self, msg, r1, r2):
 *         r1_name = "<no read>"             # <<<<<<<<<<<<<<
 *         r2_name = "<no read>"
 *         if r1:
 */
  __Pyx_INCREF(__pyx_kp_s_no_read);
  __pyx_v_r1_name = __pyx_kp_s_no_read;

  /* "khmer/_oxli/streaming.pyx":96
 *     def __init__(self, msg, r1, r2):
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"             # <<<<<<<<<<<<<<
 *         if r1:
 *             r1_name = r1.name
 */
  __Pyx_INCREF(__pyx_kp_s_no_read);
  __pyx_v_r2_name = __pyx_kp_s_no_read;

  /* "khmer/_oxli/streaming.pyx":97
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 *         if r1:             # <<<<<<<<<<<<<<
 *             r1_name = r1.name
 *         if r2:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_r1); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 97, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "khmer/_oxli/streaming.pyx":98
 *         r2_name = "<no read>"
 *         if r1:
 *             r1_name = r1.name             # <<<<<<<<<<<<<<
 *         if r2:
 *             r2_name = r2.name
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_r1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_r1_name, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/streaming.pyx":97
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 *         if r1:             # <<<<<<<<<<<<<<
 *             r1_name = r1.name
 *         if r2:
 */
  }

  /* "khmer/_oxli/streaming.pyx":99
 *         if r1:
 *             r1_name = r1.name
 *         if r2:             # <<<<<<<<<<<<<<
 *             r2_name = r2.name
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_r2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 99, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "khmer/_oxli/streaming.pyx":100
 *             r1_name = r1.name
 *         if r2:
 *             r2_name = r2.name             # <<<<<<<<<<<<<<
 * 
 *         msg = msg + '\n"{0}"\n"{1}"'.format(r1_name, r2_name)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_r2, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_r2_name, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/streaming.pyx":99
 *         if r1:
 *             r1_name = r1.name
 *         if r2:             # <<<<<<<<<<<<<<
 *             r2_name = r2.name
 * 
 */
  }

  /* "khmer/_oxli/streaming.pyx":102
 *             r2_name = r2.name
 * 
 *         msg = msg + '\n"{0}"\n"{1}"'.format(r1_name, r2_name)             # <<<<<<<<<<<<<<
 *         ValueError.__init__(self, msg)
 *         self.read1 = r1
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_0_1, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_r1_name, __pyx_v_r2_name};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_r1_name, __pyx_v_r2_name};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_r1_name);
    __Pyx_GIVEREF(__pyx_v_r1_name);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_r1_name);
    __Pyx_INCREF(__pyx_v_r2_name);
    __Pyx_GIVEREF(__pyx_v_r2_name);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_r2_name);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_v_msg, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_msg, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/streaming.pyx":103
 * 
 *         msg = msg + '\n"{0}"\n"{1}"'.format(r1_name, r2_name)
 *         ValueError.__init__(self, msg)             # <<<<<<<<<<<<<<
 *         self.read1 = r1
 *         self.read2 = r2
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_builtin_ValueError, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_self, __pyx_v_msg};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_self, __pyx_v_msg};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_msg);
    __Pyx_GIVEREF(__pyx_v_msg);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_v_msg);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "khmer/_oxli/streaming.pyx":104
 *         msg = msg + '\n"{0}"\n"{1}"'.format(r1_name, r2_name)
 *         ValueError.__init__(self, msg)
 *         self.read1 = r1             # <<<<<<<<<<<<<<
 *         self.read2 = r2
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_read1, __pyx_v_r1) < 0) __PYX_ERR(0, 104, __pyx_L1_error)

  /* "khmer/_oxli/streaming.pyx":105
 *         ValueError.__init__(self, msg)
 *         self.read1 = r1
 *         self.read2 = r2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_read2, __pyx_v_r2) < 0) __PYX_ERR(0, 105, __pyx_L1_error)

  /* "khmer/_oxli/streaming.pyx":94
 *     """ValueError with refs to the read pair in question."""
 * 
 *     def __init__(self, msg, r1, r2):             # <<<<<<<<<<<<<<
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("khmer._oxli.streaming.UnpairedReadsError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r1_name);
  __Pyx_XDECREF(__pyx_v_r2_name);
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":108
 * 
 * 
 * cdef inline bool is_valid_dna(const char base):             # <<<<<<<<<<<<<<
 *     return base == 'A' or base == 'C' or base == 'G'\
 *            or base == 'T' or base == 'N'
 */

static CYTHON_INLINE bool __pyx_f_5khmer_5_oxli_9streaming_is_valid_dna(char const __pyx_v_base) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("is_valid_dna", 0);

  /* "khmer/_oxli/streaming.pyx":109
 * 
 * cdef inline bool is_valid_dna(const char base):
 *     return base == 'A' or base == 'C' or base == 'G'\             # <<<<<<<<<<<<<<
 *            or base == 'T' or base == 'N'
 * 
 */
  switch (__pyx_v_base) {
    case 'A':
    case 'C':
    case 'G':

    /* "khmer/_oxli/streaming.pyx":110
 * cdef inline bool is_valid_dna(const char base):
 *     return base == 'A' or base == 'C' or base == 'G'\
 *            or base == 'T' or base == 'N'             # <<<<<<<<<<<<<<
 * 
 * 
 */
    case 'T':
    case 'N':

    /* "khmer/_oxli/streaming.pyx":109
 * 
 * cdef inline bool is_valid_dna(const char base):
 *     return base == 'A' or base == 'C' or base == 'G'\             # <<<<<<<<<<<<<<
 *            or base == 'T' or base == 'N'
 * 
 */
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":108
 * 
 * 
 * cdef inline bool is_valid_dna(const char base):             # <<<<<<<<<<<<<<
 *     return base == 'A' or base == 'C' or base == 'G'\
 *            or base == 'T' or base == 'N'
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":113
 * 
 * 
 * cdef inline bool sanitize_sequence(string& sequence):             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     for i in range(sequence.length()):
 */

static CYTHON_INLINE bool __pyx_f_5khmer_5_oxli_9streaming_sanitize_sequence(std::string &__pyx_v_sequence) {
  int __pyx_v_i;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("sanitize_sequence", 0);

  /* "khmer/_oxli/streaming.pyx":114
 * 
 * cdef inline bool sanitize_sequence(string& sequence):
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     for i in range(sequence.length()):
 *         sequence[i] &= 0xdf
 */
  __pyx_v_i = 0;

  /* "khmer/_oxli/streaming.pyx":115
 * cdef inline bool sanitize_sequence(string& sequence):
 *     cdef int i = 0
 *     for i in range(sequence.length()):             # <<<<<<<<<<<<<<
 *         sequence[i] &= 0xdf
 *         if not is_valid_dna(sequence[i]):
 */
  __pyx_t_1 = __pyx_v_sequence.length();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "khmer/_oxli/streaming.pyx":116
 *     cdef int i = 0
 *     for i in range(sequence.length()):
 *         sequence[i] &= 0xdf             # <<<<<<<<<<<<<<
 *         if not is_valid_dna(sequence[i]):
 *             return False
 */
    __pyx_t_3 = __pyx_v_i;
    (__pyx_v_sequence[__pyx_t_3]) = ((__pyx_v_sequence[__pyx_t_3]) & 0xdf);

    /* "khmer/_oxli/streaming.pyx":117
 *     for i in range(sequence.length()):
 *         sequence[i] &= 0xdf
 *         if not is_valid_dna(sequence[i]):             # <<<<<<<<<<<<<<
 *             return False
 *         if sequence[i] == 'N':
 */
    __pyx_t_4 = ((!(__pyx_f_5khmer_5_oxli_9streaming_is_valid_dna((__pyx_v_sequence[__pyx_v_i])) != 0)) != 0);
    if (__pyx_t_4) {

      /* "khmer/_oxli/streaming.pyx":118
 *         sequence[i] &= 0xdf
 *         if not is_valid_dna(sequence[i]):
 *             return False             # <<<<<<<<<<<<<<
 *         if sequence[i] == 'N':
 *             sequence[i] = 'A'
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "khmer/_oxli/streaming.pyx":117
 *     for i in range(sequence.length()):
 *         sequence[i] &= 0xdf
 *         if not is_valid_dna(sequence[i]):             # <<<<<<<<<<<<<<
 *             return False
 *         if sequence[i] == 'N':
 */
    }

    /* "khmer/_oxli/streaming.pyx":119
 *         if not is_valid_dna(sequence[i]):
 *             return False
 *         if sequence[i] == 'N':             # <<<<<<<<<<<<<<
 *             sequence[i] = 'A'
 *     return True
 */
    __pyx_t_4 = (((__pyx_v_sequence[__pyx_v_i]) == 'N') != 0);
    if (__pyx_t_4) {

      /* "khmer/_oxli/streaming.pyx":120
 *             return False
 *         if sequence[i] == 'N':
 *             sequence[i] = 'A'             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
      (__pyx_v_sequence[__pyx_v_i]) = 'A';

      /* "khmer/_oxli/streaming.pyx":119
 *         if not is_valid_dna(sequence[i]):
 *             return False
 *         if sequence[i] == 'N':             # <<<<<<<<<<<<<<
 *             sequence[i] = 'A'
 *     return True
 */
    }
  }

  /* "khmer/_oxli/streaming.pyx":121
 *         if sequence[i] == 'N':
 *             sequence[i] = 'A'
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":113
 * 
 * 
 * cdef inline bool sanitize_sequence(string& sequence):             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     for i in range(sequence.length()):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":126
 * cdef class FastxParser:
 * 
 *     def __cinit__(self, str filename):             # <<<<<<<<<<<<<<
 *         self._this.reset(new CpFastxParser(filename.encode()))
 * 
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_9streaming_11FastxParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_9streaming_11FastxParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 126, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_filename = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 126, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.streaming.FastxParser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_11FastxParser___cinit__(((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_9streaming_11FastxParser___cinit__(struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_self, PyObject *__pyx_v_filename) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/streaming.pyx":127
 * 
 *     def __cinit__(self, str filename):
 *         self._this.reset(new CpFastxParser(filename.encode()))             # <<<<<<<<<<<<<<
 * 
 *     cdef Sequence _next(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L1_error)
  __pyx_v_self->_this.reset(new khmer::read_parsers::FastxParser(__pyx_t_4));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":126
 * cdef class FastxParser:
 * 
 *     def __cinit__(self, str filename):             # <<<<<<<<<<<<<<
 *         self._this.reset(new CpFastxParser(filename.encode()))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.streaming.FastxParser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":129
 *         self._this.reset(new CpFastxParser(filename.encode()))
 * 
 *     cdef Sequence _next(self):             # <<<<<<<<<<<<<<
 *         if not deref(self._this).is_complete():
 *             return Sequence._wrap(deref(self._this).get_next_read())
 */

static struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_f_5khmer_5_oxli_9streaming_11FastxParser__next(struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_next", 0);

  /* "khmer/_oxli/streaming.pyx":130
 * 
 *     cdef Sequence _next(self):
 *         if not deref(self._this).is_complete():             # <<<<<<<<<<<<<<
 *             return Sequence._wrap(deref(self._this).get_next_read())
 *         else:
 */
  __pyx_t_1 = ((!((*__pyx_v_self->_this).is_complete() != 0)) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/streaming.pyx":131
 *     cdef Sequence _next(self):
 *         if not deref(self._this).is_complete():
 *             return Sequence._wrap(deref(self._this).get_next_read())             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_2 = ((PyObject *)__pyx_f_5khmer_5_oxli_9streaming_8Sequence__wrap((*__pyx_v_self->_this).get_next_read())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "khmer/_oxli/streaming.pyx":130
 * 
 *     cdef Sequence _next(self):
 *         if not deref(self._this).is_complete():             # <<<<<<<<<<<<<<
 *             return Sequence._wrap(deref(self._this).get_next_read())
 *         else:
 */
  }

  /* "khmer/_oxli/streaming.pyx":133
 *             return Sequence._wrap(deref(self._this).get_next_read())
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(Py_None);
    __pyx_r = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)Py_None);
    goto __pyx_L0;
  }

  /* "khmer/_oxli/streaming.pyx":129
 *         self._this.reset(new CpFastxParser(filename.encode()))
 * 
 *     cdef Sequence _next(self):             # <<<<<<<<<<<<<<
 *         if not deref(self._this).is_complete():
 *             return Sequence._wrap(deref(self._this).get_next_read())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.streaming.FastxParser._next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5khmer_5_oxli_9streaming_11FastxParser_4generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "khmer/_oxli/streaming.pyx":135
 *             return None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = self._next()
 *         while seq is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_11FastxParser_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_11FastxParser_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_11FastxParser_2__iter__(((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_11FastxParser_2__iter__(struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *)__pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__(__pyx_ptype_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 135, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5khmer_5_oxli_9streaming_11FastxParser_4generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_FastxParser___iter, __pyx_n_s_khmer__oxli_streaming); if (unlikely(!gen)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.streaming.FastxParser.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5khmer_5_oxli_9streaming_11FastxParser_4generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *__pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 135, __pyx_L1_error)

  /* "khmer/_oxli/streaming.pyx":136
 * 
 *     def __iter__(self):
 *         cdef Sequence seq = self._next()             # <<<<<<<<<<<<<<
 *         while seq is not None:
 *             yield seq
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_FastxParser *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_next(__pyx_cur_scope->__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_seq = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":137
 *     def __iter__(self):
 *         cdef Sequence seq = self._next()
 *         while seq is not None:             # <<<<<<<<<<<<<<
 *             yield seq
 *             seq = self._next()
 */
  while (1) {
    __pyx_t_2 = (((PyObject *)__pyx_cur_scope->__pyx_v_seq) != Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) break;

    /* "khmer/_oxli/streaming.pyx":138
 *         cdef Sequence seq = self._next()
 *         while seq is not None:
 *             yield seq             # <<<<<<<<<<<<<<
 *             seq = self._next()
 * 
 */
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_seq));
    __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_seq);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 138, __pyx_L1_error)

    /* "khmer/_oxli/streaming.pyx":139
 *         while seq is not None:
 *             yield seq
 *             seq = self._next()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_FastxParser *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_next(__pyx_cur_scope->__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_seq));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_seq, ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
  }
  if (1); else __pyx_cur_scope = __pyx_cur_scope;

  /* "khmer/_oxli/streaming.pyx":135
 *             return None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = self._next()
 *         while seq is not None:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":144
 * cdef class SplitPairedReader:
 * 
 *     def __cinit__(self, FastxParser left_parser,             # <<<<<<<<<<<<<<
 *                          FastxParser right_parser,
 *                          int min_length=-1,
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_left_parser = 0;
  struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_right_parser = 0;
  int __pyx_v_min_length;
  bool __pyx_v_force_name_match;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_left_parser,&__pyx_n_s_right_parser,&__pyx_n_s_min_length,&__pyx_n_s_force_name_match,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_left_parser)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_right_parser)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 4, 1); __PYX_ERR(0, 144, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_length);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force_name_match);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 144, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_left_parser = ((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)values[0]);
    __pyx_v_right_parser = ((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)values[1]);
    if (values[2]) {
      __pyx_v_min_length = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_min_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L3_error)
    } else {
      __pyx_v_min_length = ((int)-1);
    }
    if (values[3]) {
      __pyx_v_force_name_match = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_force_name_match == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/streaming.pyx":147
 *                          FastxParser right_parser,
 *                          int min_length=-1,
 *                          bool force_name_match=False):             # <<<<<<<<<<<<<<
 * 
 *         self.left_parser = left_parser
 */
      __pyx_v_force_name_match = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 144, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.streaming.SplitPairedReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_left_parser), __pyx_ptype_5khmer_5_oxli_9streaming_FastxParser, 1, "left_parser", 0))) __PYX_ERR(0, 144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_right_parser), __pyx_ptype_5khmer_5_oxli_9streaming_FastxParser, 1, "right_parser", 0))) __PYX_ERR(0, 145, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader___cinit__(((struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *)__pyx_v_self), __pyx_v_left_parser, __pyx_v_right_parser, __pyx_v_min_length, __pyx_v_force_name_match);

  /* "khmer/_oxli/streaming.pyx":144
 * cdef class SplitPairedReader:
 * 
 *     def __cinit__(self, FastxParser left_parser,             # <<<<<<<<<<<<<<
 *                          FastxParser right_parser,
 *                          int min_length=-1,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader___cinit__(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_left_parser, struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_right_parser, int __pyx_v_min_length, bool __pyx_v_force_name_match) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/streaming.pyx":149
 *                          bool force_name_match=False):
 * 
 *         self.left_parser = left_parser             # <<<<<<<<<<<<<<
 *         self.right_parser = right_parser
 *         self.min_length = min_length
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_left_parser));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_left_parser));
  __Pyx_GOTREF(__pyx_v_self->left_parser);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->left_parser));
  __pyx_v_self->left_parser = __pyx_v_left_parser;

  /* "khmer/_oxli/streaming.pyx":150
 * 
 *         self.left_parser = left_parser
 *         self.right_parser = right_parser             # <<<<<<<<<<<<<<
 *         self.min_length = min_length
 *         self.force_name_match = force_name_match
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_right_parser));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_right_parser));
  __Pyx_GOTREF(__pyx_v_self->right_parser);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->right_parser));
  __pyx_v_self->right_parser = __pyx_v_right_parser;

  /* "khmer/_oxli/streaming.pyx":151
 *         self.left_parser = left_parser
 *         self.right_parser = right_parser
 *         self.min_length = min_length             # <<<<<<<<<<<<<<
 *         self.force_name_match = force_name_match
 * 
 */
  __pyx_v_self->min_length = __pyx_v_min_length;

  /* "khmer/_oxli/streaming.pyx":152
 *         self.right_parser = right_parser
 *         self.min_length = min_length
 *         self.force_name_match = force_name_match             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_v_self->force_name_match = __pyx_v_force_name_match;

  /* "khmer/_oxli/streaming.pyx":144
 * cdef class SplitPairedReader:
 * 
 *     def __cinit__(self, FastxParser left_parser,             # <<<<<<<<<<<<<<
 *                          FastxParser right_parser,
 *                          int min_length=-1,
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5khmer_5_oxli_9streaming_17SplitPairedReader_4generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "khmer/_oxli/streaming.pyx":154
 *         self.force_name_match = force_name_match
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first, second
 *         cdef object err
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader_2__iter__(((struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader_2__iter__(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *)__pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__(__pyx_ptype_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 154, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5khmer_5_oxli_9streaming_17SplitPairedReader_4generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_SplitPairedReader___iter, __pyx_n_s_khmer__oxli_streaming); if (unlikely(!gen)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.streaming.SplitPairedReader.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5khmer_5_oxli_9streaming_17SplitPairedReader_4generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *__pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L11_resume_from_yield;
    case 2: goto __pyx_L12_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 154, __pyx_L1_error)

  /* "khmer/_oxli/streaming.pyx":157
 *         cdef Sequence first, second
 *         cdef object err
 *         cdef read_num = 0             # <<<<<<<<<<<<<<
 *         cdef int found
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_cur_scope->__pyx_v_read_num = __pyx_int_0;

  /* "khmer/_oxli/streaming.pyx":160
 *         cdef int found
 * 
 *         found, first, second, err = self._next()             # <<<<<<<<<<<<<<
 *         while found != 0:
 *             if err is not None:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_SplitPairedReader *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_next(__pyx_cur_scope->__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 160, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 160, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 160, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5khmer_5_oxli_9streaming_Sequence))))) __PYX_ERR(0, 160, __pyx_L1_error)
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5khmer_5_oxli_9streaming_Sequence))))) __PYX_ERR(0, 160, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_found = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_second = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_err = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "khmer/_oxli/streaming.pyx":161
 * 
 *         found, first, second, err = self._next()
 *         while found != 0:             # <<<<<<<<<<<<<<
 *             if err is not None:
 *                 raise err
 */
  while (1) {
    __pyx_t_7 = ((__pyx_cur_scope->__pyx_v_found != 0) != 0);
    if (!__pyx_t_7) break;

    /* "khmer/_oxli/streaming.pyx":162
 *         found, first, second, err = self._next()
 *         while found != 0:
 *             if err is not None:             # <<<<<<<<<<<<<<
 *                 raise err
 * 
 */
    __pyx_t_7 = (__pyx_cur_scope->__pyx_v_err != Py_None);
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "khmer/_oxli/streaming.pyx":163
 *         while found != 0:
 *             if err is not None:
 *                 raise err             # <<<<<<<<<<<<<<
 * 
 *             if self.min_length > 0:
 */
      __Pyx_Raise(__pyx_cur_scope->__pyx_v_err, 0, 0, 0);
      __PYX_ERR(0, 163, __pyx_L1_error)

      /* "khmer/_oxli/streaming.pyx":162
 *         found, first, second, err = self._next()
 *         while found != 0:
 *             if err is not None:             # <<<<<<<<<<<<<<
 *                 raise err
 * 
 */
    }

    /* "khmer/_oxli/streaming.pyx":165
 *                 raise err
 * 
 *             if self.min_length > 0:             # <<<<<<<<<<<<<<
 *                 if len(first) >= self.min_length or \
 *                    len(second) >= self.min_length:
 */
    __pyx_t_8 = ((__pyx_cur_scope->__pyx_v_self->min_length > 0) != 0);
    if (__pyx_t_8) {

      /* "khmer/_oxli/streaming.pyx":166
 * 
 *             if self.min_length > 0:
 *                 if len(first) >= self.min_length or \             # <<<<<<<<<<<<<<
 *                    len(second) >= self.min_length:
 * 
 */
      __pyx_t_9 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_first)); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 166, __pyx_L1_error)
      __pyx_t_7 = ((__pyx_t_9 >= __pyx_cur_scope->__pyx_v_self->min_length) != 0);
      if (!__pyx_t_7) {
      } else {
        __pyx_t_8 = __pyx_t_7;
        goto __pyx_L9_bool_binop_done;
      }

      /* "khmer/_oxli/streaming.pyx":167
 *             if self.min_length > 0:
 *                 if len(first) >= self.min_length or \
 *                    len(second) >= self.min_length:             # <<<<<<<<<<<<<<
 * 
 *                     yield read_num, True, first, second
 */
      __pyx_t_9 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_second)); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 167, __pyx_L1_error)
      __pyx_t_7 = ((__pyx_t_9 >= __pyx_cur_scope->__pyx_v_self->min_length) != 0);
      __pyx_t_8 = __pyx_t_7;
      __pyx_L9_bool_binop_done:;

      /* "khmer/_oxli/streaming.pyx":166
 * 
 *             if self.min_length > 0:
 *                 if len(first) >= self.min_length or \             # <<<<<<<<<<<<<<
 *                    len(second) >= self.min_length:
 * 
 */
      if (__pyx_t_8) {

        /* "khmer/_oxli/streaming.pyx":169
 *                    len(second) >= self.min_length:
 * 
 *                     yield read_num, True, first, second             # <<<<<<<<<<<<<<
 *             else:
 *                 yield read_num, True, first, second
 */
        __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_read_num);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_read_num);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_read_num);
        __Pyx_INCREF(Py_True);
        __Pyx_GIVEREF(Py_True);
        PyTuple_SET_ITEM(__pyx_t_1, 1, Py_True);
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L11_resume_from_yield:;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 169, __pyx_L1_error)

        /* "khmer/_oxli/streaming.pyx":166
 * 
 *             if self.min_length > 0:
 *                 if len(first) >= self.min_length or \             # <<<<<<<<<<<<<<
 *                    len(second) >= self.min_length:
 * 
 */
      }

      /* "khmer/_oxli/streaming.pyx":165
 *                 raise err
 * 
 *             if self.min_length > 0:             # <<<<<<<<<<<<<<
 *                 if len(first) >= self.min_length or \
 *                    len(second) >= self.min_length:
 */
      goto __pyx_L7;
    }

    /* "khmer/_oxli/streaming.pyx":171
 *                     yield read_num, True, first, second
 *             else:
 *                 yield read_num, True, first, second             # <<<<<<<<<<<<<<
 * 
 *             read_num += 2
 */
    /*else*/ {
      __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_read_num);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_read_num);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_read_num);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_1, 1, Py_True);
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
      __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
      PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_cur_scope->__pyx_v_first));
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
      __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
      PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_cur_scope->__pyx_v_second));
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L12_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 171, __pyx_L1_error)
    }
    __pyx_L7:;

    /* "khmer/_oxli/streaming.pyx":173
 *                 yield read_num, True, first, second
 * 
 *             read_num += 2             # <<<<<<<<<<<<<<
 *             found, first, second, err = self._next()
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_read_num, __pyx_int_2, 2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_read_num);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_read_num, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "khmer/_oxli/streaming.pyx":174
 * 
 *             read_num += 2
 *             found, first, second, err = self._next()             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple _next(self):
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_SplitPairedReader *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_next(__pyx_cur_scope->__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(__pyx_t_1 != Py_None)) {
      PyObject* sequence = __pyx_t_1;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 174, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 3); 
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_5,&__pyx_t_4,&__pyx_t_3,&__pyx_t_2};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 174, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 174, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5khmer_5_oxli_9streaming_Sequence))))) __PYX_ERR(0, 174, __pyx_L1_error)
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5khmer_5_oxli_9streaming_Sequence))))) __PYX_ERR(0, 174, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_found = __pyx_t_6;
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_first, ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_4));
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_second, ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_3));
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_err);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_err, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
  }
  if (1); else __pyx_cur_scope = __pyx_cur_scope;

  /* "khmer/_oxli/streaming.pyx":154
 *         self.force_name_match = force_name_match
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first, second
 *         cdef object err
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":176
 *             found, first, second, err = self._next()
 * 
 *     cdef tuple _next(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first = self.left_parser._next()
 *         cdef Sequence second = self.right_parser._next()
 */

static PyObject *__pyx_f_5khmer_5_oxli_9streaming_17SplitPairedReader__next(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_first = 0;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_second = 0;
  PyObject *__pyx_v_err = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("_next", 0);

  /* "khmer/_oxli/streaming.pyx":177
 * 
 *     cdef tuple _next(self):
 *         cdef Sequence first = self.left_parser._next()             # <<<<<<<<<<<<<<
 *         cdef Sequence second = self.right_parser._next()
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_FastxParser *)__pyx_v_self->left_parser->__pyx_vtab)->_next(__pyx_v_self->left_parser)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":178
 *     cdef tuple _next(self):
 *         cdef Sequence first = self.left_parser._next()
 *         cdef Sequence second = self.right_parser._next()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_FastxParser *)__pyx_v_self->right_parser->__pyx_vtab)->_next(__pyx_v_self->right_parser)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_second = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":181
 * 
 * 
 *         if first is None and first is not second:             # <<<<<<<<<<<<<<
 *             err = UnpairedReadsError('Differing lengths of left '\
 *                                      'and right files!')
 */
  __pyx_t_3 = (((PyObject *)__pyx_v_first) == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_first != __pyx_v_second);
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "khmer/_oxli/streaming.pyx":182
 * 
 *         if first is None and first is not second:
 *             err = UnpairedReadsError('Differing lengths of left '\             # <<<<<<<<<<<<<<
 *                                      'and right files!')
 *             return -1, None, None, err
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnpairedReadsError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_err = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "khmer/_oxli/streaming.pyx":184
 *             err = UnpairedReadsError('Differing lengths of left '\
 *                                      'and right files!')
 *             return -1, None, None, err             # <<<<<<<<<<<<<<
 * 
 *         if first is None:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_neg_1);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 1, Py_None);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 2, Py_None);
    __Pyx_INCREF(__pyx_v_err);
    __Pyx_GIVEREF(__pyx_v_err);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_err);
    __pyx_r = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "khmer/_oxli/streaming.pyx":181
 * 
 * 
 *         if first is None and first is not second:             # <<<<<<<<<<<<<<
 *             err = UnpairedReadsError('Differing lengths of left '\
 *                                      'and right files!')
 */
  }

  /* "khmer/_oxli/streaming.pyx":186
 *             return -1, None, None, err
 * 
 *         if first is None:             # <<<<<<<<<<<<<<
 *             return 0, None, None, None
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_first) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "khmer/_oxli/streaming.pyx":187
 * 
 *         if first is None:
 *             return 0, None, None, None             # <<<<<<<<<<<<<<
 * 
 *         if self.force_name_match:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple__10);
    __pyx_r = __pyx_tuple__10;
    goto __pyx_L0;

    /* "khmer/_oxli/streaming.pyx":186
 *             return -1, None, None, err
 * 
 *         if first is None:             # <<<<<<<<<<<<<<
 *             return 0, None, None, None
 * 
 */
  }

  /* "khmer/_oxli/streaming.pyx":189
 *             return 0, None, None, None
 * 
 *         if self.force_name_match:             # <<<<<<<<<<<<<<
 *             if _check_is_pair(first, second):
 *                 return 2, first, second, None
 */
  __pyx_t_3 = (__pyx_v_self->force_name_match != 0);
  if (__pyx_t_3) {

    /* "khmer/_oxli/streaming.pyx":190
 * 
 *         if self.force_name_match:
 *             if _check_is_pair(first, second):             # <<<<<<<<<<<<<<
 *                 return 2, first, second, None
 *             else:
 */
    __pyx_t_3 = (__pyx_f_5khmer_5_oxli_9streaming__check_is_pair(__pyx_v_first, __pyx_v_second) != 0);
    if (__pyx_t_3) {

      /* "khmer/_oxli/streaming.pyx":191
 *         if self.force_name_match:
 *             if _check_is_pair(first, second):
 *                 return 2, first, second, None             # <<<<<<<<<<<<<<
 *             else:
 *                 err =  UnpairedReadsError('', first, second)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_first));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
      PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_first));
      __Pyx_INCREF(((PyObject *)__pyx_v_second));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
      PyTuple_SET_ITEM(__pyx_t_5, 2, ((PyObject *)__pyx_v_second));
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_5, 3, Py_None);
      __pyx_r = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "khmer/_oxli/streaming.pyx":190
 * 
 *         if self.force_name_match:
 *             if _check_is_pair(first, second):             # <<<<<<<<<<<<<<
 *                 return 2, first, second, None
 *             else:
 */
    }

    /* "khmer/_oxli/streaming.pyx":193
 *                 return 2, first, second, None
 *             else:
 *                 err =  UnpairedReadsError('', first, second)             # <<<<<<<<<<<<<<
 *                 return -1, None, None, err
 *         else:
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnpairedReadsError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_kp_s__11, ((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second)};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_kp_s__11, ((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second)};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 193, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_s__11);
        __Pyx_GIVEREF(__pyx_kp_s__11);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_kp_s__11);
        __Pyx_INCREF(((PyObject *)__pyx_v_first));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)__pyx_v_first));
        __Pyx_INCREF(((PyObject *)__pyx_v_second));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
        PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, ((PyObject *)__pyx_v_second));
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_err = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "khmer/_oxli/streaming.pyx":194
 *             else:
 *                 err =  UnpairedReadsError('', first, second)
 *                 return -1, None, None, err             # <<<<<<<<<<<<<<
 *         else:
 *             return 2, first, second, None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_neg_1);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_5, 1, Py_None);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_5, 2, Py_None);
      __Pyx_INCREF(__pyx_v_err);
      __Pyx_GIVEREF(__pyx_v_err);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_err);
      __pyx_r = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;
      goto __pyx_L0;
    }

    /* "khmer/_oxli/streaming.pyx":189
 *             return 0, None, None, None
 * 
 *         if self.force_name_match:             # <<<<<<<<<<<<<<
 *             if _check_is_pair(first, second):
 *                 return 2, first, second, None
 */
  }

  /* "khmer/_oxli/streaming.pyx":196
 *                 return -1, None, None, err
 *         else:
 *             return 2, first, second, None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_first));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
    PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_first));
    __Pyx_INCREF(((PyObject *)__pyx_v_second));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
    PyTuple_SET_ITEM(__pyx_t_5, 2, ((PyObject *)__pyx_v_second));
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 3, Py_None);
    __pyx_r = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "khmer/_oxli/streaming.pyx":176
 *             found, first, second, err = self._next()
 * 
 *     cdef tuple _next(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first = self.left_parser._next()
 *         cdef Sequence second = self.right_parser._next()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("khmer._oxli.streaming.SplitPairedReader._next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_first);
  __Pyx_XDECREF((PyObject *)__pyx_v_second);
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pxd":33
 *     cdef FastxParser left_parser
 *     cdef FastxParser right_parser
 *     cdef readonly int min_length             # <<<<<<<<<<<<<<
 *     cdef readonly bool force_name_match
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_10min_length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_10min_length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader_10min_length___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader_10min_length___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->min_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.streaming.SplitPairedReader.min_length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pxd":34
 *     cdef FastxParser right_parser
 *     cdef readonly int min_length
 *     cdef readonly bool force_name_match             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple _next(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_16force_name_match_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_16force_name_match_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader_16force_name_match___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_17SplitPairedReader_16force_name_match___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->force_name_match); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.streaming.SplitPairedReader.force_name_match.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":201
 * cdef class BrokenPairedReader:
 * 
 *     def __cinit__(self, FastxParser parser,             # <<<<<<<<<<<<<<
 *                   int min_length=-1,
 *                   bool force_single=False,
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_parser = 0;
  int __pyx_v_min_length;
  bool __pyx_v_force_single;
  bool __pyx_v_require_paired;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parser,&__pyx_n_s_min_length,&__pyx_n_s_force_single,&__pyx_n_s_require_paired,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parser)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_length);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force_single);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_require_paired);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 201, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_parser = ((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)values[0]);
    if (values[1]) {
      __pyx_v_min_length = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_min_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L3_error)
    } else {
      __pyx_v_min_length = ((int)-1);
    }
    if (values[2]) {
      __pyx_v_force_single = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_force_single == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 203, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/streaming.pyx":203
 *     def __cinit__(self, FastxParser parser,
 *                   int min_length=-1,
 *                   bool force_single=False,             # <<<<<<<<<<<<<<
 *                   bool require_paired=False):
 * 
 */
      __pyx_v_force_single = ((bool)0);
    }
    if (values[3]) {
      __pyx_v_require_paired = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_require_paired == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/streaming.pyx":204
 *                   int min_length=-1,
 *                   bool force_single=False,
 *                   bool require_paired=False):             # <<<<<<<<<<<<<<
 * 
 *         if force_single and require_paired:
 */
      __pyx_v_require_paired = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 201, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.streaming.BrokenPairedReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parser), __pyx_ptype_5khmer_5_oxli_9streaming_FastxParser, 1, "parser", 0))) __PYX_ERR(0, 201, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader___cinit__(((struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *)__pyx_v_self), __pyx_v_parser, __pyx_v_min_length, __pyx_v_force_single, __pyx_v_require_paired);

  /* "khmer/_oxli/streaming.pyx":201
 * cdef class BrokenPairedReader:
 * 
 *     def __cinit__(self, FastxParser parser,             # <<<<<<<<<<<<<<
 *                   int min_length=-1,
 *                   bool force_single=False,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader___cinit__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *__pyx_v_parser, int __pyx_v_min_length, bool __pyx_v_force_single, bool __pyx_v_require_paired) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/streaming.pyx":206
 *                   bool require_paired=False):
 * 
 *         if force_single and require_paired:             # <<<<<<<<<<<<<<
 *             raise ValueError("force_single and require_paired cannot both be set!")
 * 
 */
  __pyx_t_2 = (__pyx_v_force_single != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_require_paired != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "khmer/_oxli/streaming.pyx":207
 * 
 *         if force_single and require_paired:
 *             raise ValueError("force_single and require_paired cannot both be set!")             # <<<<<<<<<<<<<<
 * 
 *         self.parser = parser
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 207, __pyx_L1_error)

    /* "khmer/_oxli/streaming.pyx":206
 *                   bool require_paired=False):
 * 
 *         if force_single and require_paired:             # <<<<<<<<<<<<<<
 *             raise ValueError("force_single and require_paired cannot both be set!")
 * 
 */
  }

  /* "khmer/_oxli/streaming.pyx":209
 *             raise ValueError("force_single and require_paired cannot both be set!")
 * 
 *         self.parser = parser             # <<<<<<<<<<<<<<
 *         self.min_length = min_length
 *         self.force_single = force_single
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parser));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parser));
  __Pyx_GOTREF(__pyx_v_self->parser);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parser));
  __pyx_v_self->parser = __pyx_v_parser;

  /* "khmer/_oxli/streaming.pyx":210
 * 
 *         self.parser = parser
 *         self.min_length = min_length             # <<<<<<<<<<<<<<
 *         self.force_single = force_single
 *         self.require_paired = require_paired
 */
  __pyx_v_self->min_length = __pyx_v_min_length;

  /* "khmer/_oxli/streaming.pyx":211
 *         self.parser = parser
 *         self.min_length = min_length
 *         self.force_single = force_single             # <<<<<<<<<<<<<<
 *         self.require_paired = require_paired
 * 
 */
  __pyx_v_self->force_single = __pyx_v_force_single;

  /* "khmer/_oxli/streaming.pyx":212
 *         self.min_length = min_length
 *         self.force_single = force_single
 *         self.require_paired = require_paired             # <<<<<<<<<<<<<<
 * 
 *         self.record = None
 */
  __pyx_v_self->require_paired = __pyx_v_require_paired;

  /* "khmer/_oxli/streaming.pyx":214
 *         self.require_paired = require_paired
 * 
 *         self.record = None             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->record);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->record));
  __pyx_v_self->record = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)Py_None);

  /* "khmer/_oxli/streaming.pyx":201
 * cdef class BrokenPairedReader:
 * 
 *     def __cinit__(self, FastxParser parser,             # <<<<<<<<<<<<<<
 *                   int min_length=-1,
 *                   bool force_single=False,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.streaming.BrokenPairedReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5khmer_5_oxli_9streaming_18BrokenPairedReader_4generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "khmer/_oxli/streaming.pyx":216
 *         self.record = None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first
 *         cdef Sequence second
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_2__iter__(((struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_2__iter__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *)__pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__(__pyx_ptype_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 216, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5khmer_5_oxli_9streaming_18BrokenPairedReader_4generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_BrokenPairedReader___iter, __pyx_n_s_khmer__oxli_streaming); if (unlikely(!gen)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.streaming.BrokenPairedReader.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5khmer_5_oxli_9streaming_18BrokenPairedReader_4generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *__pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L14_resume_from_yield;
    case 2: goto __pyx_L15_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 216, __pyx_L1_error)

  /* "khmer/_oxli/streaming.pyx":221
 *         cdef object err
 *         cdef int found
 *         cdef int read_num = 0             # <<<<<<<<<<<<<<
 *         cdef bool passed_length = True
 * 
 */
  __pyx_cur_scope->__pyx_v_read_num = 0;

  /* "khmer/_oxli/streaming.pyx":222
 *         cdef int found
 *         cdef int read_num = 0
 *         cdef bool passed_length = True             # <<<<<<<<<<<<<<
 * 
 *         found, first, second, err = self._next()
 */
  __pyx_cur_scope->__pyx_v_passed_length = 1;

  /* "khmer/_oxli/streaming.pyx":224
 *         cdef bool passed_length = True
 * 
 *         found, first, second, err = self._next()             # <<<<<<<<<<<<<<
 *         while (found != 0):
 *             if err is not None:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_BrokenPairedReader *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_next(__pyx_cur_scope->__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 224, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 224, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 224, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5khmer_5_oxli_9streaming_Sequence))))) __PYX_ERR(0, 224, __pyx_L1_error)
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5khmer_5_oxli_9streaming_Sequence))))) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_found = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_second = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_err = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "khmer/_oxli/streaming.pyx":225
 * 
 *         found, first, second, err = self._next()
 *         while (found != 0):             # <<<<<<<<<<<<<<
 *             if err is not None:
 *                 raise err
 */
  while (1) {
    __pyx_t_7 = ((__pyx_cur_scope->__pyx_v_found != 0) != 0);
    if (!__pyx_t_7) break;

    /* "khmer/_oxli/streaming.pyx":226
 *         found, first, second, err = self._next()
 *         while (found != 0):
 *             if err is not None:             # <<<<<<<<<<<<<<
 *                 raise err
 * 
 */
    __pyx_t_7 = (__pyx_cur_scope->__pyx_v_err != Py_None);
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "khmer/_oxli/streaming.pyx":227
 *         while (found != 0):
 *             if err is not None:
 *                 raise err             # <<<<<<<<<<<<<<
 * 
 *             if self.min_length > 0:
 */
      __Pyx_Raise(__pyx_cur_scope->__pyx_v_err, 0, 0, 0);
      __PYX_ERR(0, 227, __pyx_L1_error)

      /* "khmer/_oxli/streaming.pyx":226
 *         found, first, second, err = self._next()
 *         while (found != 0):
 *             if err is not None:             # <<<<<<<<<<<<<<
 *                 raise err
 * 
 */
    }

    /* "khmer/_oxli/streaming.pyx":229
 *                 raise err
 * 
 *             if self.min_length > 0:             # <<<<<<<<<<<<<<
 *                 if found == 1:
 *                     if len(first) < self.min_length:
 */
    __pyx_t_8 = ((__pyx_cur_scope->__pyx_v_self->min_length > 0) != 0);
    if (__pyx_t_8) {

      /* "khmer/_oxli/streaming.pyx":230
 * 
 *             if self.min_length > 0:
 *                 if found == 1:             # <<<<<<<<<<<<<<
 *                     if len(first) < self.min_length:
 *                         passed_length = False
 */
      __pyx_t_8 = ((__pyx_cur_scope->__pyx_v_found == 1) != 0);
      if (__pyx_t_8) {

        /* "khmer/_oxli/streaming.pyx":231
 *             if self.min_length > 0:
 *                 if found == 1:
 *                     if len(first) < self.min_length:             # <<<<<<<<<<<<<<
 *                         passed_length = False
 *                 else:
 */
        __pyx_t_9 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_first)); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 231, __pyx_L1_error)
        __pyx_t_8 = ((__pyx_t_9 < __pyx_cur_scope->__pyx_v_self->min_length) != 0);
        if (__pyx_t_8) {

          /* "khmer/_oxli/streaming.pyx":232
 *                 if found == 1:
 *                     if len(first) < self.min_length:
 *                         passed_length = False             # <<<<<<<<<<<<<<
 *                 else:
 *                     if len(first) < self.min_length or len(second) < self.min_length:
 */
          __pyx_cur_scope->__pyx_v_passed_length = 0;

          /* "khmer/_oxli/streaming.pyx":231
 *             if self.min_length > 0:
 *                 if found == 1:
 *                     if len(first) < self.min_length:             # <<<<<<<<<<<<<<
 *                         passed_length = False
 *                 else:
 */
        }

        /* "khmer/_oxli/streaming.pyx":230
 * 
 *             if self.min_length > 0:
 *                 if found == 1:             # <<<<<<<<<<<<<<
 *                     if len(first) < self.min_length:
 *                         passed_length = False
 */
        goto __pyx_L8;
      }

      /* "khmer/_oxli/streaming.pyx":234
 *                         passed_length = False
 *                 else:
 *                     if len(first) < self.min_length or len(second) < self.min_length:             # <<<<<<<<<<<<<<
 *                         passed_length = False
 * 
 */
      /*else*/ {
        __pyx_t_9 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_first)); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 234, __pyx_L1_error)
        __pyx_t_7 = ((__pyx_t_9 < __pyx_cur_scope->__pyx_v_self->min_length) != 0);
        if (!__pyx_t_7) {
        } else {
          __pyx_t_8 = __pyx_t_7;
          goto __pyx_L11_bool_binop_done;
        }
        __pyx_t_9 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_second)); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 234, __pyx_L1_error)
        __pyx_t_7 = ((__pyx_t_9 < __pyx_cur_scope->__pyx_v_self->min_length) != 0);
        __pyx_t_8 = __pyx_t_7;
        __pyx_L11_bool_binop_done:;
        if (__pyx_t_8) {

          /* "khmer/_oxli/streaming.pyx":235
 *                 else:
 *                     if len(first) < self.min_length or len(second) < self.min_length:
 *                         passed_length = False             # <<<<<<<<<<<<<<
 * 
 *                 if passed_length:
 */
          __pyx_cur_scope->__pyx_v_passed_length = 0;

          /* "khmer/_oxli/streaming.pyx":234
 *                         passed_length = False
 *                 else:
 *                     if len(first) < self.min_length or len(second) < self.min_length:             # <<<<<<<<<<<<<<
 *                         passed_length = False
 * 
 */
        }
      }
      __pyx_L8:;

      /* "khmer/_oxli/streaming.pyx":237
 *                         passed_length = False
 * 
 *                 if passed_length:             # <<<<<<<<<<<<<<
 *                     yield read_num, found == 2, first, second
 *                     read_num += found
 */
      __pyx_t_8 = (__pyx_cur_scope->__pyx_v_passed_length != 0);
      if (__pyx_t_8) {

        /* "khmer/_oxli/streaming.pyx":238
 * 
 *                 if passed_length:
 *                     yield read_num, found == 2, first, second             # <<<<<<<<<<<<<<
 *                     read_num += found
 *             else:
 */
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_read_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyBool_FromLong((__pyx_cur_scope->__pyx_v_found == 2)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        PyTuple_SET_ITEM(__pyx_t_4, 3, ((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __pyx_t_1 = 0;
        __pyx_t_5 = 0;
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L14_resume_from_yield:;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 238, __pyx_L1_error)

        /* "khmer/_oxli/streaming.pyx":239
 *                 if passed_length:
 *                     yield read_num, found == 2, first, second
 *                     read_num += found             # <<<<<<<<<<<<<<
 *             else:
 *                 yield read_num, found == 2, first, second
 */
        __pyx_cur_scope->__pyx_v_read_num = (__pyx_cur_scope->__pyx_v_read_num + __pyx_cur_scope->__pyx_v_found);

        /* "khmer/_oxli/streaming.pyx":237
 *                         passed_length = False
 * 
 *                 if passed_length:             # <<<<<<<<<<<<<<
 *                     yield read_num, found == 2, first, second
 *                     read_num += found
 */
      }

      /* "khmer/_oxli/streaming.pyx":229
 *                 raise err
 * 
 *             if self.min_length > 0:             # <<<<<<<<<<<<<<
 *                 if found == 1:
 *                     if len(first) < self.min_length:
 */
      goto __pyx_L7;
    }

    /* "khmer/_oxli/streaming.pyx":241
 *                     read_num += found
 *             else:
 *                 yield read_num, found == 2, first, second             # <<<<<<<<<<<<<<
 *                 read_num += found
 *             found, first, second, err = self._next()
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_read_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyBool_FromLong((__pyx_cur_scope->__pyx_v_found == 2)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
      __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
      PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_cur_scope->__pyx_v_first));
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
      __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
      PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_cur_scope->__pyx_v_second));
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L15_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 241, __pyx_L1_error)

      /* "khmer/_oxli/streaming.pyx":242
 *             else:
 *                 yield read_num, found == 2, first, second
 *                 read_num += found             # <<<<<<<<<<<<<<
 *             found, first, second, err = self._next()
 *             passed_length = True
 */
      __pyx_cur_scope->__pyx_v_read_num = (__pyx_cur_scope->__pyx_v_read_num + __pyx_cur_scope->__pyx_v_found);
    }
    __pyx_L7:;

    /* "khmer/_oxli/streaming.pyx":243
 *                 yield read_num, found == 2, first, second
 *                 read_num += found
 *             found, first, second, err = self._next()             # <<<<<<<<<<<<<<
 *             passed_length = True
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_BrokenPairedReader *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_next(__pyx_cur_scope->__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(__pyx_t_1 != Py_None)) {
      PyObject* sequence = __pyx_t_1;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 243, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 3); 
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_5,&__pyx_t_4,&__pyx_t_3,&__pyx_t_2};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 243, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 243, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5khmer_5_oxli_9streaming_Sequence))))) __PYX_ERR(0, 243, __pyx_L1_error)
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5khmer_5_oxli_9streaming_Sequence))))) __PYX_ERR(0, 243, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_found = __pyx_t_6;
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_first, ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_4));
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_second, ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_3));
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_err);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_err, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/streaming.pyx":244
 *                 read_num += found
 *             found, first, second, err = self._next()
 *             passed_length = True             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple _next(self):
 */
    __pyx_cur_scope->__pyx_v_passed_length = 1;
  }
  if (1); else __pyx_cur_scope = __pyx_cur_scope;

  /* "khmer/_oxli/streaming.pyx":216
 *         self.record = None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first
 *         cdef Sequence second
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":246
 *             passed_length = True
 * 
 *     cdef tuple _next(self):             # <<<<<<<<<<<<<<
 *         cdef bool has_next
 *         cdef Sequence first, second
 */

static PyObject *__pyx_f_5khmer_5_oxli_9streaming_18BrokenPairedReader__next(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self) {
  bool __pyx_v_has_next;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_first = 0;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_second = 0;
  PyObject *__pyx_v_err = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("_next", 0);

  /* "khmer/_oxli/streaming.pyx":250
 *         cdef Sequence first, second
 * 
 *         if self.record == None:             # <<<<<<<<<<<<<<
 *             # No previous sequence. Try to get one.
 *             first = self.parser._next()
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->record), Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "khmer/_oxli/streaming.pyx":252
 *         if self.record == None:
 *             # No previous sequence. Try to get one.
 *             first = self.parser._next()             # <<<<<<<<<<<<<<
 *             # And none left? We're outta here.
 *             if first is None:
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_FastxParser *)__pyx_v_self->parser->__pyx_vtab)->_next(__pyx_v_self->parser)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "khmer/_oxli/streaming.pyx":254
 *             first = self.parser._next()
 *             # And none left? We're outta here.
 *             if first is None:             # <<<<<<<<<<<<<<
 *                 return 0, None, None, None
 *         else:
 */
    __pyx_t_2 = (((PyObject *)__pyx_v_first) == Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "khmer/_oxli/streaming.pyx":255
 *             # And none left? We're outta here.
 *             if first is None:
 *                 return 0, None, None, None             # <<<<<<<<<<<<<<
 *         else:
 *             first = self.record
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_tuple__13);
      __pyx_r = __pyx_tuple__13;
      goto __pyx_L0;

      /* "khmer/_oxli/streaming.pyx":254
 *             first = self.parser._next()
 *             # And none left? We're outta here.
 *             if first is None:             # <<<<<<<<<<<<<<
 *                 return 0, None, None, None
 *         else:
 */
    }

    /* "khmer/_oxli/streaming.pyx":250
 *         cdef Sequence first, second
 * 
 *         if self.record == None:             # <<<<<<<<<<<<<<
 *             # No previous sequence. Try to get one.
 *             first = self.parser._next()
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/streaming.pyx":257
 *                 return 0, None, None, None
 *         else:
 *             first = self.record             # <<<<<<<<<<<<<<
 * 
 *         second = self.parser_next()
 */
  /*else*/ {
    __pyx_t_1 = ((PyObject *)__pyx_v_self->record);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "khmer/_oxli/streaming.pyx":259
 *             first = self.record
 * 
 *         second = self.parser_next()             # <<<<<<<<<<<<<<
 * 
 *         # check if paired
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_parser_next); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5khmer_5_oxli_9streaming_Sequence))))) __PYX_ERR(0, 259, __pyx_L1_error)
  __pyx_v_second = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":262
 * 
 *         # check if paired
 *         if has_next:             # <<<<<<<<<<<<<<
 *             if _check_is_pair(first, second) and not self.force_single:
 *                 self.record = None
 */
  __pyx_t_3 = (__pyx_v_has_next != 0);
  if (__pyx_t_3) {

    /* "khmer/_oxli/streaming.pyx":263
 *         # check if paired
 *         if has_next:
 *             if _check_is_pair(first, second) and not self.force_single:             # <<<<<<<<<<<<<<
 *                 self.record = None
 *                 return 2, first, second, None    # found 2 proper records
 */
    __pyx_t_2 = (__pyx_f_5khmer_5_oxli_9streaming__check_is_pair(__pyx_v_first, __pyx_v_second) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_self->force_single != 0)) != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_3) {

      /* "khmer/_oxli/streaming.pyx":264
 *         if has_next:
 *             if _check_is_pair(first, second) and not self.force_single:
 *                 self.record = None             # <<<<<<<<<<<<<<
 *                 return 2, first, second, None    # found 2 proper records
 *             else:                                   # orphan.
 */
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      __Pyx_GOTREF(__pyx_v_self->record);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->record));
      __pyx_v_self->record = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)Py_None);

      /* "khmer/_oxli/streaming.pyx":265
 *             if _check_is_pair(first, second) and not self.force_single:
 *                 self.record = None
 *                 return 2, first, second, None    # found 2 proper records             # <<<<<<<<<<<<<<
 *             else:                                   # orphan.
 *                 if self.require_paired:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_first));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
      PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_first));
      __Pyx_INCREF(((PyObject *)__pyx_v_second));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
      PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_second));
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_1, 3, Py_None);
      __pyx_r = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "khmer/_oxli/streaming.pyx":263
 *         # check if paired
 *         if has_next:
 *             if _check_is_pair(first, second) and not self.force_single:             # <<<<<<<<<<<<<<
 *                 self.record = None
 *                 return 2, first, second, None    # found 2 proper records
 */
    }

    /* "khmer/_oxli/streaming.pyx":267
 *                 return 2, first, second, None    # found 2 proper records
 *             else:                                   # orphan.
 *                 if self.require_paired:             # <<<<<<<<<<<<<<
 *                     err = UnpairedReadsError(
 *                         "Unpaired reads when require_paired is set!",
 */
    /*else*/ {
      __pyx_t_3 = (__pyx_v_self->require_paired != 0);
      if (__pyx_t_3) {

        /* "khmer/_oxli/streaming.pyx":268
 *             else:                                   # orphan.
 *                 if self.require_paired:
 *                     err = UnpairedReadsError(             # <<<<<<<<<<<<<<
 *                         "Unpaired reads when require_paired is set!",
 *                         first, second)
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnpairedReadsError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "khmer/_oxli/streaming.pyx":270
 *                     err = UnpairedReadsError(
 *                         "Unpaired reads when require_paired is set!",
 *                         first, second)             # <<<<<<<<<<<<<<
 *                     return -1, None, None, err
 *                 self.record = second
 */
        __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_kp_s_Unpaired_reads_when_require_pair, ((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second)};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_kp_s_Unpaired_reads_when_require_pair, ((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second)};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 268, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_INCREF(__pyx_kp_s_Unpaired_reads_when_require_pair);
          __Pyx_GIVEREF(__pyx_kp_s_Unpaired_reads_when_require_pair);
          PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_kp_s_Unpaired_reads_when_require_pair);
          __Pyx_INCREF(((PyObject *)__pyx_v_first));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
          PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_v_first));
          __Pyx_INCREF(((PyObject *)__pyx_v_second));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
          PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, ((PyObject *)__pyx_v_second));
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_err = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "khmer/_oxli/streaming.pyx":271
 *                         "Unpaired reads when require_paired is set!",
 *                         first, second)
 *                     return -1, None, None, err             # <<<<<<<<<<<<<<
 *                 self.record = second
 *                 return 1, first, None, None
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_int_neg_1);
        __Pyx_GIVEREF(__pyx_int_neg_1);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_neg_1);
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyTuple_SET_ITEM(__pyx_t_1, 1, Py_None);
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
        __Pyx_INCREF(__pyx_v_err);
        __Pyx_GIVEREF(__pyx_v_err);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_err);
        __pyx_r = ((PyObject*)__pyx_t_1);
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "khmer/_oxli/streaming.pyx":267
 *                 return 2, first, second, None    # found 2 proper records
 *             else:                                   # orphan.
 *                 if self.require_paired:             # <<<<<<<<<<<<<<
 *                     err = UnpairedReadsError(
 *                         "Unpaired reads when require_paired is set!",
 */
      }

      /* "khmer/_oxli/streaming.pyx":272
 *                         first, second)
 *                     return -1, None, None, err
 *                 self.record = second             # <<<<<<<<<<<<<<
 *                 return 1, first, None, None
 *         else:
 */
      __Pyx_INCREF(((PyObject *)__pyx_v_second));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
      __Pyx_GOTREF(__pyx_v_self->record);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->record));
      __pyx_v_self->record = __pyx_v_second;

      /* "khmer/_oxli/streaming.pyx":273
 *                     return -1, None, None, err
 *                 self.record = second
 *                 return 1, first, None, None             # <<<<<<<<<<<<<<
 *         else:
 *             # ran out of reads, handle last record
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_1);
      __Pyx_INCREF(((PyObject *)__pyx_v_first));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
      PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_first));
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_1, 3, Py_None);
      __pyx_r = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;
      goto __pyx_L0;
    }

    /* "khmer/_oxli/streaming.pyx":262
 * 
 *         # check if paired
 *         if has_next:             # <<<<<<<<<<<<<<
 *             if _check_is_pair(first, second) and not self.force_single:
 *                 self.record = None
 */
  }

  /* "khmer/_oxli/streaming.pyx":276
 *         else:
 *             # ran out of reads, handle last record
 *             if self.require_paired:             # <<<<<<<<<<<<<<
 *                 err =  UnpairedReadsError("Unpaired reads when require_paired "
 *                                           "is set!", first, None)
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->require_paired != 0);
    if (__pyx_t_3) {

      /* "khmer/_oxli/streaming.pyx":277
 *             # ran out of reads, handle last record
 *             if self.require_paired:
 *                 err =  UnpairedReadsError("Unpaired reads when require_paired "             # <<<<<<<<<<<<<<
 *                                           "is set!", first, None)
 *                 return -1, None, None, err
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnpairedReadsError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);

      /* "khmer/_oxli/streaming.pyx":278
 *             if self.require_paired:
 *                 err =  UnpairedReadsError("Unpaired reads when require_paired "
 *                                           "is set!", first, None)             # <<<<<<<<<<<<<<
 *                 return -1, None, None, err
 *             self.record = None
 */
      __pyx_t_7 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_kp_s_Unpaired_reads_when_require_pair, ((PyObject *)__pyx_v_first), Py_None};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_kp_s_Unpaired_reads_when_require_pair, ((PyObject *)__pyx_v_first), Py_None};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_s_Unpaired_reads_when_require_pair);
        __Pyx_GIVEREF(__pyx_kp_s_Unpaired_reads_when_require_pair);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_kp_s_Unpaired_reads_when_require_pair);
        __Pyx_INCREF(((PyObject *)__pyx_v_first));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, ((PyObject *)__pyx_v_first));
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, Py_None);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_err = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "khmer/_oxli/streaming.pyx":279
 *                 err =  UnpairedReadsError("Unpaired reads when require_paired "
 *                                           "is set!", first, None)
 *                 return -1, None, None, err             # <<<<<<<<<<<<<<
 *             self.record = None
 *             return 1, first, None, None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_neg_1);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_1, 1, Py_None);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
      __Pyx_INCREF(__pyx_v_err);
      __Pyx_GIVEREF(__pyx_v_err);
      PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_err);
      __pyx_r = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "khmer/_oxli/streaming.pyx":276
 *         else:
 *             # ran out of reads, handle last record
 *             if self.require_paired:             # <<<<<<<<<<<<<<
 *                 err =  UnpairedReadsError("Unpaired reads when require_paired "
 *                                           "is set!", first, None)
 */
    }

    /* "khmer/_oxli/streaming.pyx":280
 *                                           "is set!", first, None)
 *                 return -1, None, None, err
 *             self.record = None             # <<<<<<<<<<<<<<
 *             return 1, first, None, None
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->record);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->record));
    __pyx_v_self->record = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)Py_None);

    /* "khmer/_oxli/streaming.pyx":281
 *                 return -1, None, None, err
 *             self.record = None
 *             return 1, first, None, None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_first));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
    PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_first));
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 3, Py_None);
    __pyx_r = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "khmer/_oxli/streaming.pyx":246
 *             passed_length = True
 * 
 *     cdef tuple _next(self):             # <<<<<<<<<<<<<<
 *         cdef bool has_next
 *         cdef Sequence first, second
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("khmer._oxli.streaming.BrokenPairedReader._next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_first);
  __Pyx_XDECREF((PyObject *)__pyx_v_second);
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pxd":42
 * 
 *     cdef FastxParser parser
 *     cdef readonly int min_length             # <<<<<<<<<<<<<<
 *     cdef readonly bool force_single
 *     cdef readonly bool require_paired
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_10min_length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_10min_length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_10min_length___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_10min_length___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->min_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.streaming.BrokenPairedReader.min_length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pxd":43
 *     cdef FastxParser parser
 *     cdef readonly int min_length
 *     cdef readonly bool force_single             # <<<<<<<<<<<<<<
 *     cdef readonly bool require_paired
 *     cdef readonly Sequence record
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_12force_single_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_12force_single_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_12force_single___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_12force_single___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->force_single); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.streaming.BrokenPairedReader.force_single.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pxd":44
 *     cdef readonly int min_length
 *     cdef readonly bool force_single
 *     cdef readonly bool require_paired             # <<<<<<<<<<<<<<
 *     cdef readonly Sequence record
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_14require_paired_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_14require_paired_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_14require_paired___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_14require_paired___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->require_paired); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.streaming.BrokenPairedReader.require_paired.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pxd":45
 *     cdef readonly bool force_single
 *     cdef readonly bool require_paired
 *     cdef readonly Sequence record             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple _next(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_6record_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_6record_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_6record___get__(((struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_18BrokenPairedReader_6record___get__(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->record));
  __pyx_r = ((PyObject *)__pyx_v_self->record);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":284
 * 
 * 
 * cdef tuple _split_left_right(str name):             # <<<<<<<<<<<<<<
 *     """Split record name at the first whitespace and return both parts.
 * 
 */

static PyObject *__pyx_f_5khmer_5_oxli_9streaming__split_left_right(PyObject *__pyx_v_name) {
  PyObject *__pyx_v_parts = 0;
  PyObject *__pyx_v_lhs = 0;
  PyObject *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("_split_left_right", 0);

  /* "khmer/_oxli/streaming.pyx":289
 *     RHS is set to an empty string if not present.
 *     """
 *     cdef list parts = name.split(None, 1)             # <<<<<<<<<<<<<<
 *     cdef str lhs = parts[0]
 *     cdef str rhs = parts[1] if len(parts) > 1 else ''
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 289, __pyx_L1_error)
  __pyx_v_parts = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/streaming.pyx":290
 *     """
 *     cdef list parts = name.split(None, 1)
 *     cdef str lhs = parts[0]             # <<<<<<<<<<<<<<
 *     cdef str rhs = parts[1] if len(parts) > 1 else ''
 *     return lhs, rhs
 */
  if (unlikely(__pyx_v_parts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 290, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_parts, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 290, __pyx_L1_error)
  __pyx_v_lhs = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/streaming.pyx":291
 *     cdef list parts = name.split(None, 1)
 *     cdef str lhs = parts[0]
 *     cdef str rhs = parts[1] if len(parts) > 1 else ''             # <<<<<<<<<<<<<<
 *     return lhs, rhs
 * 
 */
  if (unlikely(__pyx_v_parts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 291, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_parts); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 291, __pyx_L1_error)
  if (((__pyx_t_3 > 1) != 0)) {
    if (unlikely(__pyx_v_parts == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 291, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_parts, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 291, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_kp_s__11);
    __pyx_t_2 = __pyx_kp_s__11;
  }
  __pyx_v_rhs = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/streaming.pyx":292
 *     cdef str lhs = parts[0]
 *     cdef str rhs = parts[1] if len(parts) > 1 else ''
 *     return lhs, rhs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_lhs);
  __Pyx_GIVEREF(__pyx_v_lhs);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_lhs);
  __Pyx_INCREF(__pyx_v_rhs);
  __Pyx_GIVEREF(__pyx_v_rhs);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_rhs);
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":284
 * 
 * 
 * cdef tuple _split_left_right(str name):             # <<<<<<<<<<<<<<
 *     """Split record name at the first whitespace and return both parts.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.streaming._split_left_right", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parts);
  __Pyx_XDECREF(__pyx_v_lhs);
  __Pyx_XDECREF(__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":295
 * 
 * 
 * cdef bool _check_is_pair(Sequence first, Sequence second):             # <<<<<<<<<<<<<<
 *     """Check if the two sequence records belong to the same fragment.
 * 
 */

static bool __pyx_f_5khmer_5_oxli_9streaming__check_is_pair(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_first, struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_second) {
  PyObject *__pyx_v_lhs1 = 0;
  PyObject *__pyx_v_rhs1 = 0;
  PyObject *__pyx_v_lhs2 = 0;
  PyObject *__pyx_v_rhs2 = 0;
  PyObject *__pyx_v_subpart1 = 0;
  PyObject *__pyx_v_subpart2 = 0;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_check_is_pair", 0);

  /* "khmer/_oxli/streaming.pyx":312
 * 
 *     cdef str lhs1, rhs1, lhs2, rhs2
 *     lhs1, rhs1 = _split_left_right(first.name)             # <<<<<<<<<<<<<<
 *     lhs2, rhs2 = _split_left_right(second.name)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_first), __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5khmer_5_oxli_9streaming__split_left_right(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 312, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 312, __pyx_L1_error)
  }
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 312, __pyx_L1_error)
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_v_lhs1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_rhs1 = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/streaming.pyx":313
 *     cdef str lhs1, rhs1, lhs2, rhs2
 *     lhs1, rhs1 = _split_left_right(first.name)
 *     lhs2, rhs2 = _split_left_right(second.name)             # <<<<<<<<<<<<<<
 * 
 *     # handle 'name/1'
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_second), __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 313, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5khmer_5_oxli_9streaming__split_left_right(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 313, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 313, __pyx_L1_error)
  }
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 313, __pyx_L1_error)
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 313, __pyx_L1_error)
  __pyx_v_lhs2 = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":317
 *     # handle 'name/1'
 *     cdef str subpart1, subpart2
 *     if lhs1.endswith('/1') and lhs2.endswith('/2'):             # <<<<<<<<<<<<<<
 *         subpart1 = lhs1.split('/', 1)[0]
 *         subpart2 = lhs2.split('/', 1)[0]
 */
  if (unlikely(__pyx_v_lhs1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "endswith");
    __PYX_ERR(0, 317, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyStr_Tailmatch(__pyx_v_lhs1, __pyx_kp_s_1, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 317, __pyx_L1_error)
  if ((__pyx_t_5 != 0)) {
  } else {
    __pyx_t_4 = (__pyx_t_5 != 0);
    goto __pyx_L4_bool_binop_done;
  }
  if (unlikely(__pyx_v_lhs2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "endswith");
    __PYX_ERR(0, 317, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyStr_Tailmatch(__pyx_v_lhs2, __pyx_kp_s_2, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "khmer/_oxli/streaming.pyx":318
 *     cdef str subpart1, subpart2
 *     if lhs1.endswith('/1') and lhs2.endswith('/2'):
 *         subpart1 = lhs1.split('/', 1)[0]             # <<<<<<<<<<<<<<
 *         subpart2 = lhs2.split('/', 1)[0]
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs1, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 318, __pyx_L1_error)
    __pyx_v_subpart1 = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/streaming.pyx":319
 *     if lhs1.endswith('/1') and lhs2.endswith('/2'):
 *         subpart1 = lhs1.split('/', 1)[0]
 *         subpart2 = lhs2.split('/', 1)[0]             # <<<<<<<<<<<<<<
 * 
 *         if subpart1 and subpart1 == subpart2:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs2, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 319, __pyx_L1_error)
    __pyx_v_subpart2 = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/streaming.pyx":321
 *         subpart2 = lhs2.split('/', 1)[0]
 * 
 *         if subpart1 and subpart1 == subpart2:             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_subpart1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 321, __pyx_L1_error)
    if (__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_subpart1, __pyx_v_subpart2, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 321, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_4) {

      /* "khmer/_oxli/streaming.pyx":322
 * 
 *         if subpart1 and subpart1 == subpart2:
 *             return True             # <<<<<<<<<<<<<<
 * 
 *     # handle '@name 1:rst'
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "khmer/_oxli/streaming.pyx":321
 *         subpart2 = lhs2.split('/', 1)[0]
 * 
 *         if subpart1 and subpart1 == subpart2:             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
    }

    /* "khmer/_oxli/streaming.pyx":317
 *     # handle 'name/1'
 *     cdef str subpart1, subpart2
 *     if lhs1.endswith('/1') and lhs2.endswith('/2'):             # <<<<<<<<<<<<<<
 *         subpart1 = lhs1.split('/', 1)[0]
 *         subpart2 = lhs2.split('/', 1)[0]
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/streaming.pyx":325
 * 
 *     # handle '@name 1:rst'
 *     elif lhs1 == lhs2 and rhs1.startswith('1:') and rhs2.startswith('2:'):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_v_lhs1, __pyx_v_lhs2, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 325, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L9_bool_binop_done;
  }
  if (unlikely(__pyx_v_rhs1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "startswith");
    __PYX_ERR(0, 325, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyStr_Tailmatch(__pyx_v_rhs1, __pyx_kp_s_1_2, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 325, __pyx_L1_error)
  if ((__pyx_t_5 != 0)) {
  } else {
    __pyx_t_4 = (__pyx_t_5 != 0);
    goto __pyx_L9_bool_binop_done;
  }
  if (unlikely(__pyx_v_rhs2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "startswith");
    __PYX_ERR(0, 325, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyStr_Tailmatch(__pyx_v_rhs2, __pyx_kp_s_2_2, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 325, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_4) {

    /* "khmer/_oxli/streaming.pyx":326
 *     # handle '@name 1:rst'
 *     elif lhs1 == lhs2 and rhs1.startswith('1:') and rhs2.startswith('2:'):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     # handle @name seq/1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/streaming.pyx":325
 * 
 *     # handle '@name 1:rst'
 *     elif lhs1 == lhs2 and rhs1.startswith('1:') and rhs2.startswith('2:'):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "khmer/_oxli/streaming.pyx":329
 * 
 *     # handle @name seq/1
 *     elif lhs1 == lhs2 and rhs1.endswith('/1') and rhs2.endswith('/2'):             # <<<<<<<<<<<<<<
 *         subpart1 = rhs1.split('/', 1)[0]
 *         subpart2 = rhs2.split('/', 1)[0]
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_lhs1, __pyx_v_lhs2, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L12_bool_binop_done;
  }
  if (unlikely(__pyx_v_rhs1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "endswith");
    __PYX_ERR(0, 329, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyStr_Tailmatch(__pyx_v_rhs1, __pyx_kp_s_1, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 329, __pyx_L1_error)
  if ((__pyx_t_6 != 0)) {
  } else {
    __pyx_t_4 = (__pyx_t_6 != 0);
    goto __pyx_L12_bool_binop_done;
  }
  if (unlikely(__pyx_v_rhs2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "endswith");
    __PYX_ERR(0, 329, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyStr_Tailmatch(__pyx_v_rhs2, __pyx_kp_s_2, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_6 != 0);
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_4) {

    /* "khmer/_oxli/streaming.pyx":330
 *     # handle @name seq/1
 *     elif lhs1 == lhs2 and rhs1.endswith('/1') and rhs2.endswith('/2'):
 *         subpart1 = rhs1.split('/', 1)[0]             # <<<<<<<<<<<<<<
 *         subpart2 = rhs2.split('/', 1)[0]
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs1, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 330, __pyx_L1_error)
    __pyx_v_subpart1 = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/streaming.pyx":331
 *     elif lhs1 == lhs2 and rhs1.endswith('/1') and rhs2.endswith('/2'):
 *         subpart1 = rhs1.split('/', 1)[0]
 *         subpart2 = rhs2.split('/', 1)[0]             # <<<<<<<<<<<<<<
 * 
 *         if subpart1 and subpart1 == subpart2:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs2, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 331, __pyx_L1_error)
    __pyx_v_subpart2 = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/streaming.pyx":333
 *         subpart2 = rhs2.split('/', 1)[0]
 * 
 *         if subpart1 and subpart1 == subpart2:             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_subpart1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 333, __pyx_L1_error)
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_v_subpart1, __pyx_v_subpart2, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 333, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_4) {

      /* "khmer/_oxli/streaming.pyx":334
 * 
 *         if subpart1 and subpart1 == subpart2:
 *             return True             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "khmer/_oxli/streaming.pyx":333
 *         subpart2 = rhs2.split('/', 1)[0]
 * 
 *         if subpart1 and subpart1 == subpart2:             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
    }

    /* "khmer/_oxli/streaming.pyx":329
 * 
 *     # handle @name seq/1
 *     elif lhs1 == lhs2 and rhs1.endswith('/1') and rhs2.endswith('/2'):             # <<<<<<<<<<<<<<
 *         subpart1 = rhs1.split('/', 1)[0]
 *         subpart2 = rhs2.split('/', 1)[0]
 */
  }
  __pyx_L3:;

  /* "khmer/_oxli/streaming.pyx":336
 *             return True
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":295
 * 
 * 
 * cdef bool _check_is_pair(Sequence first, Sequence second):             # <<<<<<<<<<<<<<
 *     """Check if the two sequence records belong to the same fragment.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("khmer._oxli.streaming._check_is_pair", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lhs1);
  __Pyx_XDECREF(__pyx_v_rhs1);
  __Pyx_XDECREF(__pyx_v_lhs2);
  __Pyx_XDECREF(__pyx_v_rhs2);
  __Pyx_XDECREF(__pyx_v_subpart1);
  __Pyx_XDECREF(__pyx_v_subpart2);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":339
 * 
 * 
 * def check_is_pair(Sequence first, Sequence second):             # <<<<<<<<<<<<<<
 *     return _check_is_pair(first, second)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_3check_is_pair(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5khmer_5_oxli_9streaming_3check_is_pair = {"check_is_pair", (PyCFunction)__pyx_pw_5khmer_5_oxli_9streaming_3check_is_pair, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5khmer_5_oxli_9streaming_3check_is_pair(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_first = 0;
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_second = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_is_pair (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_first,&__pyx_n_s_second,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_first)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_second)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_is_pair", 1, 2, 2, 1); __PYX_ERR(0, 339, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "check_is_pair") < 0)) __PYX_ERR(0, 339, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)values[0]);
    __pyx_v_second = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check_is_pair", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 339, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.streaming.check_is_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_first), __pyx_ptype_5khmer_5_oxli_9streaming_Sequence, 1, "first", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_second), __pyx_ptype_5khmer_5_oxli_9streaming_Sequence, 1, "second", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_9streaming_2check_is_pair(__pyx_self, __pyx_v_first, __pyx_v_second);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_9streaming_2check_is_pair(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_first, struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *__pyx_v_second) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("check_is_pair", 0);

  /* "khmer/_oxli/streaming.pyx":340
 * 
 * def check_is_pair(Sequence first, Sequence second):
 *     return _check_is_pair(first, second)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_5khmer_5_oxli_9streaming__check_is_pair(__pyx_v_first, __pyx_v_second)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":339
 * 
 * 
 * def check_is_pair(Sequence first, Sequence second):             # <<<<<<<<<<<<<<
 *     return _check_is_pair(first, second)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.streaming.check_is_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":343
 * 
 * 
 * cdef bool check_is_left(str name):             # <<<<<<<<<<<<<<
 *     """Check if the name belongs to a 'left' sequence (/1).
 * 
 */

static bool __pyx_f_5khmer_5_oxli_9streaming_check_is_left(PyObject *__pyx_v_name) {
  PyObject *__pyx_v_lhs = 0;
  PyObject *__pyx_v_rhs = 0;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("check_is_left", 0);

  /* "khmer/_oxli/streaming.pyx":351
 *     """
 *     cdef str lhs, rhs
 *     lhs, rhs = _split_left_right(name)             # <<<<<<<<<<<<<<
 *     if lhs.endswith('/1'):              # handle 'name/1'
 *         return True
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_9streaming__split_left_right(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 351, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 351, __pyx_L1_error)
  }
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 351, __pyx_L1_error)
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 351, __pyx_L1_error)
  __pyx_v_lhs = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/streaming.pyx":352
 *     cdef str lhs, rhs
 *     lhs, rhs = _split_left_right(name)
 *     if lhs.endswith('/1'):              # handle 'name/1'             # <<<<<<<<<<<<<<
 *         return True
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'
 */
  if (unlikely(__pyx_v_lhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "endswith");
    __PYX_ERR(0, 352, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyStr_Tailmatch(__pyx_v_lhs, __pyx_kp_s_1, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 352, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/streaming.pyx":353
 *     lhs, rhs = _split_left_right(name)
 *     if lhs.endswith('/1'):              # handle 'name/1'
 *         return True             # <<<<<<<<<<<<<<
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'
 *         return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/streaming.pyx":352
 *     cdef str lhs, rhs
 *     lhs, rhs = _split_left_right(name)
 *     if lhs.endswith('/1'):              # handle 'name/1'             # <<<<<<<<<<<<<<
 *         return True
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'
 */
  }

  /* "khmer/_oxli/streaming.pyx":354
 *     if lhs.endswith('/1'):              # handle 'name/1'
 *         return True
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  if (unlikely(__pyx_v_rhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "startswith");
    __PYX_ERR(0, 354, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyStr_Tailmatch(__pyx_v_rhs, __pyx_kp_s_1_2, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 354, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/streaming.pyx":355
 *         return True
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     elif rhs.endswith('/1'):            # handles '@name seq/1'
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/streaming.pyx":354
 *     if lhs.endswith('/1'):              # handle 'name/1'
 *         return True
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "khmer/_oxli/streaming.pyx":357
 *         return True
 * 
 *     elif rhs.endswith('/1'):            # handles '@name seq/1'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  if (unlikely(__pyx_v_rhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "endswith");
    __PYX_ERR(0, 357, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyStr_Tailmatch(__pyx_v_rhs, __pyx_kp_s_1, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 357, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/streaming.pyx":358
 * 
 *     elif rhs.endswith('/1'):            # handles '@name seq/1'
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/streaming.pyx":357
 *         return True
 * 
 *     elif rhs.endswith('/1'):            # handles '@name seq/1'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "khmer/_oxli/streaming.pyx":360
 *         return True
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":343
 * 
 * 
 * cdef bool check_is_left(str name):             # <<<<<<<<<<<<<<
 *     """Check if the name belongs to a 'left' sequence (/1).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("khmer._oxli.streaming.check_is_left", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lhs);
  __Pyx_XDECREF(__pyx_v_rhs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/streaming.pyx":363
 * 
 * 
 * cdef bool check_is_right(str name):             # <<<<<<<<<<<<<<
 *     """Check if the name belongs to a 'right' sequence (/2).
 * 
 */

static bool __pyx_f_5khmer_5_oxli_9streaming_check_is_right(PyObject *__pyx_v_name) {
  PyObject *__pyx_v_lhs = 0;
  PyObject *__pyx_v_rhs = 0;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("check_is_right", 0);

  /* "khmer/_oxli/streaming.pyx":371
 *     """
 *     cdef str lhs, rhs
 *     lhs, rhs = _split_left_right(name)             # <<<<<<<<<<<<<<
 *     if lhs.endswith('/2'):              # handle 'name/2'
 *         return True
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_9streaming__split_left_right(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 371, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 371, __pyx_L1_error)
  }
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 371, __pyx_L1_error)
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 371, __pyx_L1_error)
  __pyx_v_lhs = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/streaming.pyx":372
 *     cdef str lhs, rhs
 *     lhs, rhs = _split_left_right(name)
 *     if lhs.endswith('/2'):              # handle 'name/2'             # <<<<<<<<<<<<<<
 *         return True
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'
 */
  if (unlikely(__pyx_v_lhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "endswith");
    __PYX_ERR(0, 372, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyStr_Tailmatch(__pyx_v_lhs, __pyx_kp_s_2, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 372, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/streaming.pyx":373
 *     lhs, rhs = _split_left_right(name)
 *     if lhs.endswith('/2'):              # handle 'name/2'
 *         return True             # <<<<<<<<<<<<<<
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'
 *         return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/streaming.pyx":372
 *     cdef str lhs, rhs
 *     lhs, rhs = _split_left_right(name)
 *     if lhs.endswith('/2'):              # handle 'name/2'             # <<<<<<<<<<<<<<
 *         return True
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'
 */
  }

  /* "khmer/_oxli/streaming.pyx":374
 *     if lhs.endswith('/2'):              # handle 'name/2'
 *         return True
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  if (unlikely(__pyx_v_rhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "startswith");
    __PYX_ERR(0, 374, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyStr_Tailmatch(__pyx_v_rhs, __pyx_kp_s_2_2, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 374, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/streaming.pyx":375
 *         return True
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     elif rhs.endswith('/2'):            # handles '@name seq/2'
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/streaming.pyx":374
 *     if lhs.endswith('/2'):              # handle 'name/2'
 *         return True
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "khmer/_oxli/streaming.pyx":377
 *         return True
 * 
 *     elif rhs.endswith('/2'):            # handles '@name seq/2'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  if (unlikely(__pyx_v_rhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "endswith");
    __PYX_ERR(0, 377, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyStr_Tailmatch(__pyx_v_rhs, __pyx_kp_s_2, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 377, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/streaming.pyx":378
 * 
 *     elif rhs.endswith('/2'):            # handles '@name seq/2'
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/streaming.pyx":377
 *         return True
 * 
 *     elif rhs.endswith('/2'):            # handles '@name seq/2'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "khmer/_oxli/streaming.pyx":380
 *         return True
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/streaming.pyx":363
 * 
 * 
 * cdef bool check_is_right(str name):             # <<<<<<<<<<<<<<
 *     """Check if the name belongs to a 'right' sequence (/2).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("khmer._oxli.streaming.check_is_right", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lhs);
  __Pyx_XDECREF(__pyx_v_rhs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(2, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_Sequence __pyx_vtable_5khmer_5_oxli_9streaming_Sequence;

static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming_Sequence(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)o);
  p->__pyx_vtab = __pyx_vtabptr_5khmer_5_oxli_9streaming_Sequence;
  new((void*)&(p->_obj)) khmer::read_parsers::Read();
  if (unlikely(__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_9streaming_Sequence(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *p = (struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_obj);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_8Sequence_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_8Sequence_4name_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_8Sequence_sequence(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_8Sequence_8sequence_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_8Sequence_annotations(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_8Sequence_11annotations_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_8Sequence_quality(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_8Sequence_7quality_1__get__(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_9streaming_Sequence[] = {
  {"new", (PyCFunction)__pyx_pw_5khmer_5_oxli_9streaming_8Sequence_7new, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5khmer_5_oxli_9streaming_Sequence[] = {
  {(char *)"name", __pyx_getprop_5khmer_5_oxli_9streaming_8Sequence_name, 0, (char *)0, 0},
  {(char *)"sequence", __pyx_getprop_5khmer_5_oxli_9streaming_8Sequence_sequence, 0, (char *)0, 0},
  {(char *)"annotations", __pyx_getprop_5khmer_5_oxli_9streaming_8Sequence_annotations, 0, (char *)0, 0},
  {(char *)"quality", __pyx_getprop_5khmer_5_oxli_9streaming_8Sequence_quality, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Sequence = {
  __pyx_pw_5khmer_5_oxli_9streaming_8Sequence_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Sequence = {
  __pyx_pw_5khmer_5_oxli_9streaming_8Sequence_5__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5khmer_5_oxli_9streaming_Sequence = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.streaming.Sequence", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_9streaming_Sequence, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Sequence, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Sequence, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_5khmer_5_oxli_9streaming_8Sequence_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_9streaming_Sequence, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5khmer_5_oxli_9streaming_Sequence, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_9streaming_Sequence, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming_ReadBundle(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *)o);
  p->reads = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5khmer_5_oxli_9streaming_10ReadBundle_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_9streaming_ReadBundle(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *p = (struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->reads);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5khmer_5_oxli_9streaming_ReadBundle(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *p = (struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *)o;
  if (p->reads) {
    e = (*v)(p->reads, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5khmer_5_oxli_9streaming_ReadBundle(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *p = (struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle *)o;
  tmp = ((PyObject*)p->reads);
  p->reads = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_10ReadBundle_num_reads(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_10ReadBundle_9num_reads_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_10ReadBundle_total_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_10ReadBundle_12total_length_1__get__(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_9streaming_ReadBundle[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5khmer_5_oxli_9streaming_ReadBundle[] = {
  {(char *)"num_reads", __pyx_getprop_5khmer_5_oxli_9streaming_10ReadBundle_num_reads, 0, (char *)0, 0},
  {(char *)"total_length", __pyx_getprop_5khmer_5_oxli_9streaming_10ReadBundle_total_length, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_9streaming_ReadBundle = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.streaming.ReadBundle", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming_ReadBundle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_9streaming_ReadBundle, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_9streaming_ReadBundle, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_9streaming_ReadBundle, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_9streaming_ReadBundle, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5khmer_5_oxli_9streaming_ReadBundle, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_9streaming_ReadBundle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_FastxParser __pyx_vtable_5khmer_5_oxli_9streaming_FastxParser;

static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming_FastxParser(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)o);
  p->__pyx_vtab = __pyx_vtabptr_5khmer_5_oxli_9streaming_FastxParser;
  new((void*)&(p->_this)) std::unique_ptr<khmer::read_parsers::FastxParser> ();
  if (unlikely(__pyx_pw_5khmer_5_oxli_9streaming_11FastxParser_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_9streaming_FastxParser(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *p = (struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_this);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_9streaming_FastxParser[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_9streaming_FastxParser = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.streaming.FastxParser", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_9streaming_FastxParser, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5khmer_5_oxli_9streaming_11FastxParser_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_9streaming_FastxParser, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_9streaming_FastxParser, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_SplitPairedReader __pyx_vtable_5khmer_5_oxli_9streaming_SplitPairedReader;

static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming_SplitPairedReader(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *)o);
  p->__pyx_vtab = __pyx_vtabptr_5khmer_5_oxli_9streaming_SplitPairedReader;
  p->left_parser = ((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)Py_None); Py_INCREF(Py_None);
  p->right_parser = ((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_9streaming_SplitPairedReader(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->left_parser);
  Py_CLEAR(p->right_parser);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5khmer_5_oxli_9streaming_SplitPairedReader(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *)o;
  if (p->left_parser) {
    e = (*v)(((PyObject*)p->left_parser), a); if (e) return e;
  }
  if (p->right_parser) {
    e = (*v)(((PyObject*)p->right_parser), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5khmer_5_oxli_9streaming_SplitPairedReader(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *)o;
  tmp = ((PyObject*)p->left_parser);
  p->left_parser = ((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->right_parser);
  p->right_parser = ((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_17SplitPairedReader_min_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_10min_length_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_17SplitPairedReader_force_name_match(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_16force_name_match_1__get__(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_9streaming_SplitPairedReader[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5khmer_5_oxli_9streaming_SplitPairedReader[] = {
  {(char *)"min_length", __pyx_getprop_5khmer_5_oxli_9streaming_17SplitPairedReader_min_length, 0, (char *)0, 0},
  {(char *)"force_name_match", __pyx_getprop_5khmer_5_oxli_9streaming_17SplitPairedReader_force_name_match, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_9streaming_SplitPairedReader = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.streaming.SplitPairedReader", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_9streaming_SplitPairedReader, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_9streaming_SplitPairedReader, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_9streaming_SplitPairedReader, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5khmer_5_oxli_9streaming_17SplitPairedReader_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_9streaming_SplitPairedReader, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5khmer_5_oxli_9streaming_SplitPairedReader, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_9streaming_SplitPairedReader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_9streaming_BrokenPairedReader __pyx_vtable_5khmer_5_oxli_9streaming_BrokenPairedReader;

static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming_BrokenPairedReader(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *)o);
  p->__pyx_vtab = __pyx_vtabptr_5khmer_5_oxli_9streaming_BrokenPairedReader;
  p->parser = ((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)Py_None); Py_INCREF(Py_None);
  p->record = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_9streaming_BrokenPairedReader(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parser);
  Py_CLEAR(p->record);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5khmer_5_oxli_9streaming_BrokenPairedReader(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *)o;
  if (p->parser) {
    e = (*v)(((PyObject*)p->parser), a); if (e) return e;
  }
  if (p->record) {
    e = (*v)(((PyObject*)p->record), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5khmer_5_oxli_9streaming_BrokenPairedReader(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *)o;
  tmp = ((PyObject*)p->parser);
  p->parser = ((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->record);
  p->record = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_18BrokenPairedReader_min_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_10min_length_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_18BrokenPairedReader_force_single(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_12force_single_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_18BrokenPairedReader_require_paired(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_14require_paired_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_9streaming_18BrokenPairedReader_record(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_6record_1__get__(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_9streaming_BrokenPairedReader[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5khmer_5_oxli_9streaming_BrokenPairedReader[] = {
  {(char *)"min_length", __pyx_getprop_5khmer_5_oxli_9streaming_18BrokenPairedReader_min_length, 0, (char *)0, 0},
  {(char *)"force_single", __pyx_getprop_5khmer_5_oxli_9streaming_18BrokenPairedReader_force_single, 0, (char *)0, 0},
  {(char *)"require_paired", __pyx_getprop_5khmer_5_oxli_9streaming_18BrokenPairedReader_require_paired, 0, (char *)0, 0},
  {(char *)"record", __pyx_getprop_5khmer_5_oxli_9streaming_18BrokenPairedReader_record, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_9streaming_BrokenPairedReader = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.streaming.BrokenPairedReader", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_9streaming_BrokenPairedReader, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_9streaming_BrokenPairedReader, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_9streaming_BrokenPairedReader, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5khmer_5_oxli_9streaming_18BrokenPairedReader_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_9streaming_BrokenPairedReader, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5khmer_5_oxli_9streaming_BrokenPairedReader, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_9streaming_BrokenPairedReader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *__pyx_freelist_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__[8];
static int __pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ = 0;

static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__)))) {
    o = (PyObject*)__pyx_freelist_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__[--__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__];
    memset(o, 0, sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *p = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_seq);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__)))) {
    __pyx_freelist_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__[__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__++] = ((struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *p = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_seq) {
    e = (*v)(((PyObject*)p->__pyx_v_seq), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *p = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_seq);
  p->__pyx_v_seq = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.streaming.__pyx_scope_struct____iter__", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *__pyx_freelist_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__[8];
static int __pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ = 0;

static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__)))) {
    o = (PyObject*)__pyx_freelist_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__[--__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_err);
  Py_CLEAR(p->__pyx_v_first);
  Py_CLEAR(p->__pyx_v_read_num);
  Py_CLEAR(p->__pyx_v_second);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__)))) {
    __pyx_freelist_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__[__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__++] = ((struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *)o;
  if (p->__pyx_v_err) {
    e = (*v)(p->__pyx_v_err, a); if (e) return e;
  }
  if (p->__pyx_v_first) {
    e = (*v)(((PyObject*)p->__pyx_v_first), a); if (e) return e;
  }
  if (p->__pyx_v_read_num) {
    e = (*v)(p->__pyx_v_read_num, a); if (e) return e;
  }
  if (p->__pyx_v_second) {
    e = (*v)(((PyObject*)p->__pyx_v_second), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ *)o;
  tmp = ((PyObject*)p->__pyx_v_err);
  p->__pyx_v_err = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_first);
  p->__pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_read_num);
  p->__pyx_v_read_num = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_second);
  p->__pyx_v_second = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.streaming.__pyx_scope_struct_1___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *__pyx_freelist_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__[8];
static int __pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ = 0;

static PyObject *__pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__)))) {
    o = (PyObject*)__pyx_freelist_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__[--__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_err);
  Py_CLEAR(p->__pyx_v_first);
  Py_CLEAR(p->__pyx_v_second);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__)))) {
    __pyx_freelist_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__[__pyx_freecount_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__++] = ((struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *)o;
  if (p->__pyx_v_err) {
    e = (*v)(p->__pyx_v_err, a); if (e) return e;
  }
  if (p->__pyx_v_first) {
    e = (*v)(((PyObject*)p->__pyx_v_first), a); if (e) return e;
  }
  if (p->__pyx_v_second) {
    e = (*v)(((PyObject*)p->__pyx_v_second), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ *)o;
  tmp = ((PyObject*)p->__pyx_v_err);
  p->__pyx_v_err = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_first);
  p->__pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_second);
  p->__pyx_v_second = ((struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.streaming.__pyx_scope_struct_2___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "streaming",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_0_1, __pyx_k_0_1, sizeof(__pyx_k_0_1), 0, 0, 1, 0},
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_1_2, __pyx_k_1_2, sizeof(__pyx_k_1_2), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_2_2, __pyx_k_2_2, sizeof(__pyx_k_2_2), 0, 0, 1, 0},
  {&__pyx_n_s_BrokenPairedReader___iter, __pyx_k_BrokenPairedReader___iter, sizeof(__pyx_k_BrokenPairedReader___iter), 0, 0, 1, 1},
  {&__pyx_kp_s_Differing_lengths_of_left_and_ri, __pyx_k_Differing_lengths_of_left_and_ri, sizeof(__pyx_k_Differing_lengths_of_left_and_ri), 0, 0, 1, 0},
  {&__pyx_n_s_FastxParser___iter, __pyx_k_FastxParser___iter, sizeof(__pyx_k_FastxParser___iter), 0, 0, 1, 1},
  {&__pyx_n_s_SplitPairedReader___iter, __pyx_k_SplitPairedReader___iter, sizeof(__pyx_k_SplitPairedReader___iter), 0, 0, 1, 1},
  {&__pyx_kp_s_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 0, 1, 0},
  {&__pyx_n_s_UnpairedReadsError, __pyx_k_UnpairedReadsError, sizeof(__pyx_k_UnpairedReadsError), 0, 0, 1, 1},
  {&__pyx_n_s_UnpairedReadsError___init, __pyx_k_UnpairedReadsError___init, sizeof(__pyx_k_UnpairedReadsError___init), 0, 0, 1, 1},
  {&__pyx_kp_s_Unpaired_reads_when_require_pair, __pyx_k_Unpaired_reads_when_require_pair, sizeof(__pyx_k_Unpaired_reads_when_require_pair), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s_ValueError_with_refs_to_the_read, __pyx_k_ValueError_with_refs_to_the_read, sizeof(__pyx_k_ValueError_with_refs_to_the_read), 0, 0, 1, 0},
  {&__pyx_kp_s__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 0, 1, 0},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_n_s_annotations, __pyx_k_annotations, sizeof(__pyx_k_annotations), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_check_is_pair, __pyx_k_check_is_pair, sizeof(__pyx_k_check_is_pair), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_first, __pyx_k_first, sizeof(__pyx_k_first), 0, 0, 1, 1},
  {&__pyx_n_s_force_name_match, __pyx_k_force_name_match, sizeof(__pyx_k_force_name_match), 0, 0, 1, 1},
  {&__pyx_n_s_force_single, __pyx_k_force_single, sizeof(__pyx_k_force_single), 0, 0, 1, 1},
  {&__pyx_kp_s_force_single_and_require_paired, __pyx_k_force_single_and_require_paired, sizeof(__pyx_k_force_single_and_require_paired), 0, 0, 1, 0},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_khmer__oxli_streaming, __pyx_k_khmer__oxli_streaming, sizeof(__pyx_k_khmer__oxli_streaming), 0, 0, 1, 1},
  {&__pyx_n_s_left_parser, __pyx_k_left_parser, sizeof(__pyx_k_left_parser), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_min_length, __pyx_k_min_length, sizeof(__pyx_k_min_length), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_read, __pyx_k_no_read, sizeof(__pyx_k_no_read), 0, 0, 1, 0},
  {&__pyx_n_s_parser, __pyx_k_parser, sizeof(__pyx_k_parser), 0, 0, 1, 1},
  {&__pyx_n_s_parser_next, __pyx_k_parser_next, sizeof(__pyx_k_parser_next), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_print_error, __pyx_k_print_error, sizeof(__pyx_k_print_error), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_quality, __pyx_k_quality, sizeof(__pyx_k_quality), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_r1, __pyx_k_r1, sizeof(__pyx_k_r1), 0, 0, 1, 1},
  {&__pyx_n_s_r1_name, __pyx_k_r1_name, sizeof(__pyx_k_r1_name), 0, 0, 1, 1},
  {&__pyx_n_s_r2, __pyx_k_r2, sizeof(__pyx_k_r2), 0, 0, 1, 1},
  {&__pyx_n_s_r2_name, __pyx_k_r2_name, sizeof(__pyx_k_r2_name), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read1, __pyx_k_read1, sizeof(__pyx_k_read1), 0, 0, 1, 1},
  {&__pyx_n_s_read2, __pyx_k_read2, sizeof(__pyx_k_read2), 0, 0, 1, 1},
  {&__pyx_n_s_require_paired, __pyx_k_require_paired, sizeof(__pyx_k_require_paired), 0, 0, 1, 1},
  {&__pyx_n_s_right_parser, __pyx_k_right_parser, sizeof(__pyx_k_right_parser), 0, 0, 1, 1},
  {&__pyx_n_s_second, __pyx_k_second, sizeof(__pyx_k_second), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_seq, __pyx_k_seq, sizeof(__pyx_k_seq), 0, 0, 1, 1},
  {&__pyx_n_s_sequence, __pyx_k_sequence, sizeof(__pyx_k_sequence), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_stderr, __pyx_k_stderr, sizeof(__pyx_k_stderr), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_this, __pyx_k_this, sizeof(__pyx_k_this), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_kp_s_work_khmer_khmer__oxli_streamin, __pyx_k_work_khmer_khmer__oxli_streamin, sizeof(__pyx_k_work_khmer_khmer__oxli_streamin), 0, 0, 1, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 115, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "khmer/_oxli/streaming.pyx":42
 *     def new(str name, str sequence, str annotations=None, str quality=None):
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "khmer/_oxli/streaming.pyx":43
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')
 *         seq._obj.name = name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "khmer/_oxli/streaming.pyx":45
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if quality is not None:
 *             seq._obj.quality = quality.encode('UTF-8')
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "khmer/_oxli/streaming.pyx":47
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:
 *             seq._obj.quality = quality.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         return seq
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "khmer/_oxli/streaming.pyx":54
 *     cdef Sequence _new(str name, str sequence, str annotations=None, str quality=None):
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "khmer/_oxli/streaming.pyx":55
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')
 *         seq._obj.name = name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "khmer/_oxli/streaming.pyx":57
 *         seq._obj.name = name.encode('UTF-8')
 *         if annotations is not None:
 *             seq._obj.annotations = annotations.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if quality is not None:
 *             seq._obj.quality = quality.encode('UTF-8')
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "khmer/_oxli/streaming.pyx":59
 *             seq._obj.annotations = annotations.encode('UTF-8')
 *         if quality is not None:
 *             seq._obj.quality = quality.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         return seq
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "khmer/_oxli/streaming.pyx":182
 * 
 *         if first is None and first is not second:
 *             err = UnpairedReadsError('Differing lengths of left '\             # <<<<<<<<<<<<<<
 *                                      'and right files!')
 *             return -1, None, None, err
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Differing_lengths_of_left_and_ri); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "khmer/_oxli/streaming.pyx":187
 * 
 *         if first is None:
 *             return 0, None, None, None             # <<<<<<<<<<<<<<
 * 
 *         if self.force_name_match:
 */
  __pyx_tuple__10 = PyTuple_Pack(4, __pyx_int_0, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "khmer/_oxli/streaming.pyx":207
 * 
 *         if force_single and require_paired:
 *             raise ValueError("force_single and require_paired cannot both be set!")             # <<<<<<<<<<<<<<
 * 
 *         self.parser = parser
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_force_single_and_require_paired); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "khmer/_oxli/streaming.pyx":255
 *             # And none left? We're outta here.
 *             if first is None:
 *                 return 0, None, None, None             # <<<<<<<<<<<<<<
 *         else:
 *             first = self.record
 */
  __pyx_tuple__13 = PyTuple_Pack(4, __pyx_int_0, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "khmer/_oxli/streaming.pyx":289
 *     RHS is set to an empty string if not present.
 *     """
 *     cdef list parts = name.split(None, 1)             # <<<<<<<<<<<<<<
 *     cdef str lhs = parts[0]
 *     cdef str rhs = parts[1] if len(parts) > 1 else ''
 */
  __pyx_tuple__14 = PyTuple_Pack(2, Py_None, __pyx_int_1); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "khmer/_oxli/streaming.pyx":318
 *     cdef str subpart1, subpart2
 *     if lhs1.endswith('/1') and lhs2.endswith('/2'):
 *         subpart1 = lhs1.split('/', 1)[0]             # <<<<<<<<<<<<<<
 *         subpart2 = lhs2.split('/', 1)[0]
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_kp_s__15, __pyx_int_1); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "khmer/_oxli/streaming.pyx":319
 *     if lhs1.endswith('/1') and lhs2.endswith('/2'):
 *         subpart1 = lhs1.split('/', 1)[0]
 *         subpart2 = lhs2.split('/', 1)[0]             # <<<<<<<<<<<<<<
 * 
 *         if subpart1 and subpart1 == subpart2:
 */
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_kp_s__15, __pyx_int_1); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "khmer/_oxli/streaming.pyx":330
 *     # handle @name seq/1
 *     elif lhs1 == lhs2 and rhs1.endswith('/1') and rhs2.endswith('/2'):
 *         subpart1 = rhs1.split('/', 1)[0]             # <<<<<<<<<<<<<<
 *         subpart2 = rhs2.split('/', 1)[0]
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_kp_s__15, __pyx_int_1); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "khmer/_oxli/streaming.pyx":331
 *     elif lhs1 == lhs2 and rhs1.endswith('/1') and rhs2.endswith('/2'):
 *         subpart1 = rhs1.split('/', 1)[0]
 *         subpart2 = rhs2.split('/', 1)[0]             # <<<<<<<<<<<<<<
 * 
 *         if subpart1 and subpart1 == subpart2:
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_kp_s__15, __pyx_int_1); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "khmer/_oxli/streaming.pyx":40
 * 
 *     @staticmethod
 *     def new(str name, str sequence, str annotations=None, str quality=None):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')
 */
  __pyx_tuple__20 = PyTuple_Pack(5, __pyx_n_s_name, __pyx_n_s_sequence, __pyx_n_s_annotations, __pyx_n_s_quality, __pyx_n_s_seq); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_work_khmer_khmer__oxli_streamin, __pyx_n_s_new, 40, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 40, __pyx_L1_error)

  /* "khmer/_oxli/streaming.pyx":85
 * 
 * 
 * def print_error(msg):             # <<<<<<<<<<<<<<
 *     """Print the given message to 'stderr'."""
 * 
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_n_s_msg); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_work_khmer_khmer__oxli_streamin, __pyx_n_s_print_error, 85, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 85, __pyx_L1_error)

  /* "khmer/_oxli/streaming.pyx":94
 *     """ValueError with refs to the read pair in question."""
 * 
 *     def __init__(self, msg, r1, r2):             # <<<<<<<<<<<<<<
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 */
  __pyx_tuple__24 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_msg, __pyx_n_s_r1, __pyx_n_s_r2, __pyx_n_s_r1_name, __pyx_n_s_r2_name); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_work_khmer_khmer__oxli_streamin, __pyx_n_s_init, 94, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 94, __pyx_L1_error)

  /* "khmer/_oxli/streaming.pyx":339
 * 
 * 
 * def check_is_pair(Sequence first, Sequence second):             # <<<<<<<<<<<<<<
 *     return _check_is_pair(first, second)
 * 
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_s_first, __pyx_n_s_second); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_work_khmer_khmer__oxli_streamin, __pyx_n_s_check_is_pair, 339, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initstreaming(void); /*proto*/
PyMODINIT_FUNC initstreaming(void)
#else
PyMODINIT_FUNC PyInit_streaming(void); /*proto*/
PyMODINIT_FUNC PyInit_streaming(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_streaming(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("streaming", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_khmer___oxli__streaming) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "khmer._oxli.streaming")) {
      if (unlikely(PyDict_SetItemString(modules, "khmer._oxli.streaming", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("_split_left_right", (void (*)(void))__pyx_f_5khmer_5_oxli_9streaming__split_left_right, "PyObject *(PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_check_is_pair", (void (*)(void))__pyx_f_5khmer_5_oxli_9streaming__check_is_pair, "bool (struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *, struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("check_is_left", (void (*)(void))__pyx_f_5khmer_5_oxli_9streaming_check_is_left, "bool (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("check_is_right", (void (*)(void))__pyx_f_5khmer_5_oxli_9streaming_check_is_right, "bool (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("is_valid_dna", (void (*)(void))__pyx_f_5khmer_5_oxli_9streaming_is_valid_dna, "bool (char const )") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sanitize_sequence", (void (*)(void))__pyx_f_5khmer_5_oxli_9streaming_sanitize_sequence, "bool (std::string &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Type init code ---*/
  __pyx_vtabptr_5khmer_5_oxli_9streaming_Sequence = &__pyx_vtable_5khmer_5_oxli_9streaming_Sequence;
  __pyx_vtable_5khmer_5_oxli_9streaming_Sequence._new = (struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *(*)(PyObject *, PyObject *, struct __pyx_opt_args_5khmer_5_oxli_9streaming_8Sequence__new *__pyx_optional_args))__pyx_f_5khmer_5_oxli_9streaming_8Sequence__new;
  __pyx_vtable_5khmer_5_oxli_9streaming_Sequence._wrap = (struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *(*)(khmer::read_parsers::Read))__pyx_f_5khmer_5_oxli_9streaming_8Sequence__wrap;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_9streaming_Sequence) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __pyx_type_5khmer_5_oxli_9streaming_Sequence.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_9streaming_Sequence.tp_dict, __pyx_vtabptr_5khmer_5_oxli_9streaming_Sequence) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Sequence", (PyObject *)&__pyx_type_5khmer_5_oxli_9streaming_Sequence) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_9streaming_Sequence = &__pyx_type_5khmer_5_oxli_9streaming_Sequence;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_9streaming_ReadBundle) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_type_5khmer_5_oxli_9streaming_ReadBundle.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "ReadBundle", (PyObject *)&__pyx_type_5khmer_5_oxli_9streaming_ReadBundle) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_9streaming_ReadBundle = &__pyx_type_5khmer_5_oxli_9streaming_ReadBundle;
  __pyx_vtabptr_5khmer_5_oxli_9streaming_FastxParser = &__pyx_vtable_5khmer_5_oxli_9streaming_FastxParser;
  __pyx_vtable_5khmer_5_oxli_9streaming_FastxParser._next = (struct __pyx_obj_5khmer_5_oxli_9streaming_Sequence *(*)(struct __pyx_obj_5khmer_5_oxli_9streaming_FastxParser *))__pyx_f_5khmer_5_oxli_9streaming_11FastxParser__next;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_9streaming_FastxParser) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __pyx_type_5khmer_5_oxli_9streaming_FastxParser.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_9streaming_FastxParser.tp_dict, __pyx_vtabptr_5khmer_5_oxli_9streaming_FastxParser) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "FastxParser", (PyObject *)&__pyx_type_5khmer_5_oxli_9streaming_FastxParser) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_9streaming_FastxParser = &__pyx_type_5khmer_5_oxli_9streaming_FastxParser;
  __pyx_vtabptr_5khmer_5_oxli_9streaming_SplitPairedReader = &__pyx_vtable_5khmer_5_oxli_9streaming_SplitPairedReader;
  __pyx_vtable_5khmer_5_oxli_9streaming_SplitPairedReader._next = (PyObject *(*)(struct __pyx_obj_5khmer_5_oxli_9streaming_SplitPairedReader *))__pyx_f_5khmer_5_oxli_9streaming_17SplitPairedReader__next;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_9streaming_SplitPairedReader) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_type_5khmer_5_oxli_9streaming_SplitPairedReader.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_9streaming_SplitPairedReader.tp_dict, __pyx_vtabptr_5khmer_5_oxli_9streaming_SplitPairedReader) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "SplitPairedReader", (PyObject *)&__pyx_type_5khmer_5_oxli_9streaming_SplitPairedReader) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_9streaming_SplitPairedReader = &__pyx_type_5khmer_5_oxli_9streaming_SplitPairedReader;
  __pyx_vtabptr_5khmer_5_oxli_9streaming_BrokenPairedReader = &__pyx_vtable_5khmer_5_oxli_9streaming_BrokenPairedReader;
  __pyx_vtable_5khmer_5_oxli_9streaming_BrokenPairedReader._next = (PyObject *(*)(struct __pyx_obj_5khmer_5_oxli_9streaming_BrokenPairedReader *))__pyx_f_5khmer_5_oxli_9streaming_18BrokenPairedReader__next;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_9streaming_BrokenPairedReader) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __pyx_type_5khmer_5_oxli_9streaming_BrokenPairedReader.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_9streaming_BrokenPairedReader.tp_dict, __pyx_vtabptr_5khmer_5_oxli_9streaming_BrokenPairedReader) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "BrokenPairedReader", (PyObject *)&__pyx_type_5khmer_5_oxli_9streaming_BrokenPairedReader) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_9streaming_BrokenPairedReader = &__pyx_type_5khmer_5_oxli_9streaming_BrokenPairedReader;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  __pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__.tp_print = 0;
  __pyx_ptype_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__ = &__pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct____iter__;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__.tp_print = 0;
  __pyx_ptype_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__ = &__pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct_1___iter__;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__.tp_print = 0;
  __pyx_ptype_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__ = &__pyx_type_5khmer_5_oxli_9streaming___pyx_scope_struct_2___iter__;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "khmer/_oxli/streaming.pyx":7
 * from libcpp.string cimport string
 * 
 * import sys             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":40
 * 
 *     @staticmethod
 *     def new(str name, str sequence, str annotations=None, str quality=None):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5khmer_5_oxli_9streaming_8Sequence_7new, NULL, __pyx_n_s_khmer__oxli_streaming); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "khmer/_oxli/streaming.pyx":39
 *         return quality if quality else None
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def new(str name, str sequence, str annotations=None, str quality=None):
 *         cdef Sequence seq = Sequence()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5khmer_5_oxli_9streaming_Sequence->tp_dict, __pyx_n_s_new, __pyx_t_1) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5khmer_5_oxli_9streaming_Sequence);

  /* "khmer/_oxli/streaming.pyx":40
 * 
 *     @staticmethod
 *     def new(str name, str sequence, str annotations=None, str quality=None):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence()
 *         seq._obj.sequence = sequence.encode('UTF-8')
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_5khmer_5_oxli_9streaming_Sequence, __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "khmer/_oxli/streaming.pyx":39
 *         return quality if quality else None
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def new(str name, str sequence, str annotations=None, str quality=None):
 *         cdef Sequence seq = Sequence()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5khmer_5_oxli_9streaming_Sequence->tp_dict, __pyx_n_s_new, __pyx_t_1) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5khmer_5_oxli_9streaming_Sequence);

  /* "khmer/_oxli/streaming.pyx":85
 * 
 * 
 * def print_error(msg):             # <<<<<<<<<<<<<<
 *     """Print the given message to 'stderr'."""
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5khmer_5_oxli_9streaming_1print_error, NULL, __pyx_n_s_khmer__oxli_streaming); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_print_error, __pyx_t_1) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":91
 * 
 * 
 * class UnpairedReadsError(ValueError):             # <<<<<<<<<<<<<<
 *     """ValueError with refs to the read pair in question."""
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_ValueError);
  __Pyx_GIVEREF(__pyx_builtin_ValueError);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_ValueError);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_UnpairedReadsError, __pyx_n_s_UnpairedReadsError, (PyObject *) NULL, __pyx_n_s_khmer__oxli_streaming, __pyx_kp_s_ValueError_with_refs_to_the_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "khmer/_oxli/streaming.pyx":94
 *     """ValueError with refs to the read pair in question."""
 * 
 *     def __init__(self, msg, r1, r2):             # <<<<<<<<<<<<<<
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5khmer_5_oxli_9streaming_18UnpairedReadsError_1__init__, 0, __pyx_n_s_UnpairedReadsError___init, NULL, __pyx_n_s_khmer__oxli_streaming, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "khmer/_oxli/streaming.pyx":91
 * 
 * 
 * class UnpairedReadsError(ValueError):             # <<<<<<<<<<<<<<
 *     """ValueError with refs to the read pair in question."""
 * 
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_UnpairedReadsError, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnpairedReadsError, __pyx_t_4) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":339
 * 
 * 
 * def check_is_pair(Sequence first, Sequence second):             # <<<<<<<<<<<<<<
 *     return _check_is_pair(first, second)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5khmer_5_oxli_9streaming_3check_is_pair, NULL, __pyx_n_s_khmer__oxli_streaming); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_check_is_pair, __pyx_t_1) < 0) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/streaming.pyx":1
 * # cython: c_string_type=unicode, c_string_encoding=utf8             # <<<<<<<<<<<<<<
 * from __future__ import print_function
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init khmer._oxli.streaming", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init khmer._oxli.streaming");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    PyObject *result;
    int flags;
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
      static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyErrFetchRestore */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* GetItemInt */
        static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* bytes_tailmatch */
        static int __Pyx_PyBytes_SingleTailmatch(PyObject* self, PyObject* arg,
                                         Py_ssize_t start, Py_ssize_t end, int direction) {
    const char* self_ptr = PyBytes_AS_STRING(self);
    Py_ssize_t self_len = PyBytes_GET_SIZE(self);
    const char* sub_ptr;
    Py_ssize_t sub_len;
    int retval;
    Py_buffer view;
    view.obj = NULL;
    if ( PyBytes_Check(arg) ) {
        sub_ptr = PyBytes_AS_STRING(arg);
        sub_len = PyBytes_GET_SIZE(arg);
    }
#if PY_MAJOR_VERSION < 3
    else if ( PyUnicode_Check(arg) ) {
        return (int) PyUnicode_Tailmatch(self, arg, start, end, direction);
    }
#endif
    else {
        if (unlikely(PyObject_GetBuffer(self, &view, PyBUF_SIMPLE) == -1))
            return -1;
        sub_ptr = (const char*) view.buf;
        sub_len = view.len;
    }
    if (end > self_len)
        end = self_len;
    else if (end < 0)
        end += self_len;
    if (end < 0)
        end = 0;
    if (start < 0)
        start += self_len;
    if (start < 0)
        start = 0;
    if (direction > 0) {
        if (end-sub_len > start)
            start = end - sub_len;
    }
    if (start + sub_len <= end)
        retval = !memcmp(self_ptr+start, sub_ptr, (size_t)sub_len);
    else
        retval = 0;
    if (view.obj)
        PyBuffer_Release(&view);
    return retval;
}
static int __Pyx_PyBytes_Tailmatch(PyObject* self, PyObject* substr,
                                   Py_ssize_t start, Py_ssize_t end, int direction) {
    if (unlikely(PyTuple_Check(substr))) {
        Py_ssize_t i, count = PyTuple_GET_SIZE(substr);
        for (i = 0; i < count; i++) {
            int result;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            result = __Pyx_PyBytes_SingleTailmatch(self, PyTuple_GET_ITEM(substr, i),
                                                   start, end, direction);
#else
            PyObject* sub = PySequence_ITEM(substr, i);
            if (unlikely(!sub)) return -1;
            result = __Pyx_PyBytes_SingleTailmatch(self, sub, start, end, direction);
            Py_DECREF(sub);
#endif
            if (result) {
                return result;
            }
        }
        return 0;
    }
    return __Pyx_PyBytes_SingleTailmatch(self, substr, start, end, direction);
}

/* unicode_tailmatch */
        static int __Pyx_PyUnicode_Tailmatch(PyObject* s, PyObject* substr,
                                     Py_ssize_t start, Py_ssize_t end, int direction) {
    if (unlikely(PyTuple_Check(substr))) {
        Py_ssize_t i, count = PyTuple_GET_SIZE(substr);
        for (i = 0; i < count; i++) {
            Py_ssize_t result;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            result = PyUnicode_Tailmatch(s, PyTuple_GET_ITEM(substr, i),
                                         start, end, direction);
#else
            PyObject* sub = PySequence_ITEM(substr, i);
            if (unlikely(!sub)) return -1;
            result = PyUnicode_Tailmatch(s, sub, start, end, direction);
            Py_DECREF(sub);
#endif
            if (result) {
                return (int) result;
            }
        }
        return 0;
    }
    return (int) PyUnicode_Tailmatch(s, substr, start, end, direction);
}

/* str_tailmatch */
        static CYTHON_INLINE int __Pyx_PyStr_Tailmatch(PyObject* self, PyObject* arg, Py_ssize_t start,
                                               Py_ssize_t end, int direction)
{
    if (PY_MAJOR_VERSION < 3)
        return __Pyx_PyBytes_Tailmatch(self, arg, start, end, direction);
    else
        return __Pyx_PyUnicode_Tailmatch(self, arg, start, end, direction);
}

/* BytesEquals */
        static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
        static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* WriteUnraisableException */
        static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* SetVTable */
        static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* GetNameInClass */
        static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

/* CalculateMetaclass */
        static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
        static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
        static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* Py3ClassCreate */
            static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CodeObjectCache */
            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
            #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* SwapException */
            #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
            static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
            #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
                static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
                static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
